;; John could either be a lion or a person.
(define categories (list 'target 'gorilla 'bear 'tiger 'person 'snake 'ox))

;; It is extremely unlikely that John is actually a whale.
(define (categories-prior) 
  (multinomial categories 
               '(0.00166666666667 0.00166666666667 0.00166666666667 0.00166666666667 
                                  0.99 0.00166666666667 0.00166666666667)))

;; The speaker could either say the following animals
(define utterances (list 'target 'gorilla 'bear 'tiger 'person 'snake 'ox))

;; The utterances are equally costly.
(define (utterance-prior) (multinomial utterances '(0.1 0.1 0.1 0.1 0.1 0.1 0.1)))


;; The features of John being considered are "ferocious", "scary",
;; "strong." Features are binary.
(define featureSets
  (list '(1 1 1)
        '(1 1 0)
        '(1 0 1)
        '(1 0 0)
        '(0 1 1)
        '(0 1 0)
        '(0 0 1)
        '(0 0 0)))

(define featureSet-prior 
  (list
   (list '0.300926613 '0.039467175 '0.174481485 '0.04261183 
         '0.194008374 '0.056321108 '0.119008374 '0.073175041)
   (list '0.270080944 '0.092551173 '0.140425372 '0.104902692 
         '0.127497944 '0.06995186 '0.129730158 '0.064859857)
   (list '0.277894967 '0.13452551 '0.162087274 '0.094644341 
         '0.128475857 '0.060878234 '0.090930057 '0.05056376)
   (list '0.350211378 '0.090628629 '0.136890357 '0.060032088 
         '0.145860065 '0.064972863 '0.084523072 '0.066881548)
   (list '0.130179728 '0.118432252 '0.107588218 '0.105232506 
         '0.128847842 '0.130306399 '0.145415366 '0.133997687)
   (list '0.221104222 '0.117583306 '0.107917969 '0.076475932 
         '0.142342637 '0.121628697 '0.123561466 '0.089385771)
   (list '0.192489013 '0.090644087 '0.126040138 '0.077912308 
         '0.161977123 '0.095088358 '0.167475418 '0.088373555)))

;; Speaker's possible goals are to communicate feature 1, 2, or 3
(define goals (list 'goal-f1 'goal-f2 'goal-f3))

;; Prior probability of speaker's goal is set to uniform but can
;; change with context/QUD.
(define (goal-prior) (multinomial goals '(0.33 0.33 0.33)))

;; Speaker optimality parameter
(define alpha 3.0)

;; Recursive depth
(define depth 1)

;; Sample John's features given that he is a member of category
(define (sample-featureSet category prior all-categories)
  (if (equal? category (first all-categories))
      (multinomial featureSets (first prior))
      (sample-featureSet category (rest prior) (rest all-categories))))

;; Check if interpreted categroy is identical to utterance
(define (literal-interpretation utterance category)
  (equal? utterance category))

;; Check if goal is satisfied
(define (goal-satisfied? goal listener-category-f1-f2-f3 speaker-category
                         speaker-f1 speaker-f2 speaker-f3)
  (case goal
    (('goal-f1) (equal? (second listener-category-f1-f2-f3) speaker-f1))
    (('goal-f2) (equal? (third listener-category-f1-f2-f3) speaker-f2))
    (('goal-f3) (equal? (fourth listener-category-f1-f2-f3) speaker-f3))))

;; Speaker model
(define speaker
  (mem
   (lambda (category f1 f2 f3 goal depth)
     (enumeration-query
      (define utterance (utterance-prior))
      utterance
      (goal-satisfied? goal
                       (apply multinomial (listener utterance depth))
                       category f1 f2 f3)))))

;; Listener model
(define listener
  (mem 
   (lambda (utterance depth)
     (enumeration-query
      (define category (categories-prior))
      (define featureSet (sample-featureSet category featureSet-prior categories))
      (define f1 (first featureSet))
      (define f2 (second featureSet))
      (define f3 (third featureSet))
      (define speaker-goal (goal-prior))
      (list category f1 f2 f3)
      (if (equal? depth 0)
          (literal-interpretation utterance category)
          (equal? utterance
                  (apply multinomial
                         (raise-to-power (speaker category f1 f2 f3 speaker-goal (- depth 1))
                                         alpha))))))))

(define (raise-to-power speaker-dist alpha)
  (list (first speaker-dist)
        (map (lambda (x) (pow x alpha)) (second speaker-dist))))

(define (sample-one utterance)
  (listener utterance depth))

;; Probability of John's category and features given the utterance
;; "John is lion."
(barplot (sample-one 'target))
