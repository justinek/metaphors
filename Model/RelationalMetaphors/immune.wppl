/* Model for the interpretation of the analogy: "The immune system is an army."
   Pragmatic listener should end up with an interpretation that includes the following relations:
   the immune system protects the body; the immune system fights viruses; viruses harm the body
*/ 

var alpha = 5;

var categories = ["immune system", "army"];
var utterances = ["immune system", "army"];
/* QUD is system of relations, i.e., a directed labeled graph where the edge labels are relations */
var QUDs = ["relations?"];

/* Specify only 1 relation order to avoid generating isomorphic labeled graphs */
/* Relations: 'f': fights, 'p': protects, 'h': harms */

var relationOrders = [['f', 'p', 'h']];

/* Labeled directed graphs are represented using adjacency matrices */
/* Where each value in the 3 X 3 matrice represents a relationship between two components */
/* Arrow orders indicate direcation of the relationship*/
                      
var arrowOrders = [[1, 1, 1], [1, 1, 0], [1, 0, 1], [1, 0, 0],
                   [0, 1, 1], [0, 1, 0], [0, 0, 1], [0, 0, 0]];

/* Pairwise indices list the three pairs of indices */
var pairwiseIndices = [[0, 1], [0, 2], [1, 2]];

/* makeLabeledGraphs generates all non-isomorphic labeled directed graphs where there are
   3 nodes and 3 unique relations.
   */
var graphs = immunePackage.makeLabeledGraphs(pairwiseIndices, arrowOrders, relationOrders);
/*
[ [ [ 0, 'f', 'p' ], [ 0, 0, 'h' ], [ 0, 0, 0 ] ],
  [ [ 0, 'f', 'p' ], [ 0, 0, 0 ], [ 0, 'h', 0 ] ],
  [ [ 0, 'f', 0 ], [ 0, 0, 'h' ], [ 'p', 0, 0 ] ],
  [ [ 0, 'f', 0 ], [ 0, 0, 0 ], [ 'p', 'h', 0 ] ],
  [ [ 0, 0, 'p' ], [ 'f', 0, 'h' ], [ 0, 0, 0 ] ],
  [ [ 0, 0, 'p' ], [ 'f', 0, 0 ], [ 0, 'h', 0 ] ],
  [ [ 0, 0, 0 ], [ 'f', 0, 'h' ], [ 'p', 0, 0 ] ],
  [ [ 0, 0, 0 ], [ 'f', 0, 0 ], [ 'p', 'h', 0 ] ] ];
  */

/* All permutations of the three components in target domain */
var targetOrders = [["immune system", "virus", "body"],
                    ["immune system", "body", "virus"],
                    ["virus", "immune system", "body"],
                    ["virus", "body", "immune system"],
                    ["body", "immune system", "virus"],
                    ["body", "virus", "immune system"]];

/* All permutations of the three components in source domain */
var sourceOrders = [["army", "enemy", "country"],
                    ["army", "country", "enemy"],
                    ["enemy", "army", "country"],
                    ["enemy", "country", "army"],
                    ["country", "enemy", "army"],
                    ["country", "army", "enemy"]];

/* All combinations of labeled graphs and node orderings for target domain */
var targetOrderedGraphs = immunePackage.makeOrderedGraphs(graphs, targetOrders);
     
/* All combinations of labeled graphs and node orderings for source domain */
var sourceOrderedGraphs = immunePackage.makeOrderedGraphs(graphs, sourceOrders);

/* Prior probabilities of labeled graph and node ordering for source doamin, based on prior knowledge. 
   We assume that the complete graph for the source domain is known.
   */
var sourcePriors = immunePackage.makePriors(sourceOrderedGraphs, "army");

/* Prior probabilities of labeled graph and node ordering for target domain, based on prior knowledge. 
   We assume that we know that the relationship between "virus" and "body" must be "harm" and
   that graphs that do not contain this relationship are not possible.
   */

var targetPriors = immunePackage.makePriors(targetOrderedGraphs, "immune system");

/* Sample graphs */

var sampleOrderedGraphs = function(category) {
  if (category=="army") {
    return sourceOrderedGraphs[discrete(sourcePriors)];
  } else {
    return targetOrderedGraphs[discrete(targetPriors)];
  }
}

/* Sample category */
var categoryPrior = function() {
  return flip(0.99) ? "immune system" : "army";
}

/* Sample QUD */
var qudPrior = function() {
  return uniformDraw(QUDs);
}

/* Sample utterance */
var utterancePrior = function() {
  return uniformDraw(utterances);
}

/* Determines whether literal semantics of utterance matches category */
var meaning = function(utt,category) {
  return 
  utt=="army"? category =="army" :
  utt=="immune system"? category=="immune system": true
}

/* Literal listener returns information about the graph given QUD */
var literalListener = cache(function(utterance, qud) {
  Enumerate(function(){
    var category = categoryPrior();
    var graph = sampleOrderedGraphs(category);
    condition(meaning(utterance, category))
    return qud=="relations?"? graph[0]: graph[1];
  })
});

/* Speaker chooses utterance given graph and QUD */
var speaker = cache(function(graph, qud) {
  Enumerate(function(){
    var utterance = utterancePrior();
    var L0 = literalListener(utterance, qud);
    qud == "relations?"? factor(alpha * L0.score([],graph[0])) : factor(alpha * L0.score([],graph[1])); 
    return utterance;
  })
});

/* Pragmatic listener returns full graph given utterance */
var listener = cache(function(utterance) {
  Enumerate(function(){
    var category = categoryPrior();
    var graph = sampleOrderedGraphs(category);
    var qud = qudPrior();
    var S1 = speaker(graph, qud);
    factor(S1.score([], utterance));
    return graph;
  })
});

//var interp = listener("army");
console.log(listener("army"));
//console.log(listener("immune system"));
//vizPrint({"interp": interp,});
