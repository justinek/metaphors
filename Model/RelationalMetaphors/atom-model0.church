(define categories (list 'atom 'solar-system 'social-network 'company))
(define relations (list 'orbits 'talks-to 'controls))
(define structures (list 'star-tree 'complete 'hierarchical))

(define utterances (list 'atom 'solar-system 'social-network 'company))
(define (utterance-prior) (multinomial utterances '(0.1 0.1 0.1 0.1)))

(define (categories-prior) (multinomial categories '(0.99 0.01 0.01 0.01)))
(define (relations-prior category)
  (case category
        (('atom) (multinomial relations '(0.1 0.1 0.1)))
        (('solar-system) (multinomial relations '(0.9 0.01 0.1)))
        (('social-network) (multinomial relations '(0.01 0.9 0.1)))
        (('company) (multinomial relations '(0.01 0.1 0.9)))
        ))

(define (structures-prior category)
  (case category
        (('atom) (multinomial structures '(0.1 0.1 0.1)))
        (('solar-system) (multinomial structures '(0.9 0.01 0.01)))
        (('social-network) (multinomial structures '(0.1 0.9 0.01)))
        (('company) (multinomial structures '(0.1 0.01 0.9)))
        ))



;(define attribute 'tiny)

;(define attribute-prior
;  (list 0.01 0.99))

(define goals (list 'relation? 'structure? 'both?))

;; Prior probability of speaker's goal is set to uniform but can
;; change with context/QUD.
(define (goal-prior) (uniform-draw goals))

;; Speaker optimality parameter
(define alpha 5)

;; Check if interpreted categroy is identical to utterance
(define (literal-interpretation utterance category)
  (equal? utterance category))

;; Check if goal is satisfied
(define (goal-satisfied? goal listener-interp speaker-world)
  (case goal
    (('relation?) (equal? (second listener-interp) 
                           (second speaker-world)))
    (('structure?) (equal? (third listener-interp) 
                          (third speaker-world)))
    (('both?) (and (equal? (second listener-interp)
                           (second speaker-world))
                   (equal? (third listener-interp)
                           (third speaker-world))))
        ))

;; Speaker model
(define speaker
  (mem
   (lambda (category relation structure goal depth)
     (enumeration-query
      (define utterance (utterance-prior))
      utterance
      (goal-satisfied? goal
                       (apply multinomial (listener utterance depth))
                       (list category relation structure))))))

;; Listener model
(define listener
  (mem 
   (lambda (utterance depth)
     (enumeration-query
      (define category (categories-prior))
      (define relation (relations-prior category))
      (define structure (structures-prior category))
      (define speaker-goal (goal-prior))
      (list category relation structure)
      (if (equal? depth 0)
          (literal-interpretation utterance category)
          (equal? utterance
                  (apply multinomial
                         (raise-to-power (speaker category relation structure speaker-goal (- depth 1))
                                         alpha))))))))

(define (raise-to-power speaker-dist alpha)
  (list (first speaker-dist)
        (map (lambda (x) (pow x alpha)) (second speaker-dist))))

;; Recursive depth
(define depth 1)

(barplot (listener 'solar-system depth))
