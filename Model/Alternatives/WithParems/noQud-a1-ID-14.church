(define (goal-prior) (multinomial goals '(0.33 0.335 0.335)))
(define alpha 1)
(define categories (list 'peacock 'target 'dolphin 'cat 'person 'snake))
(define utterances (list 'peacock 'target 'dolphin 'cat 'person 'snake))
(define (utterance-prior) (multinomial utterances '(0.1 0.1 0.1 0.1 0.1 0.1)))
(define (categories-prior) (multinomial categories '(0.002 0.002 0.002 0.002 0.99 0.002)))
(define featureSet-prior (list(list '0.308040963 '0.15178333 '0.132554712 '0.088831583 '0.104302565 '0.088282402 '0.069516855 '0.05668759)(list '0.249892732 '0.154593854 '0.116317225 '0.087243547 '0.13869298 '0.08587619 '0.094241754 '0.073141718)(list '0.323021369 '0.168246523 '0.138117367 '0.089884021 '0.101297095 '0.074294836 '0.06505113 '0.040087659)(list '0.261463814 '0.147252257 '0.118442792 '0.09294274 '0.140021159 '0.086558835 '0.085593304 '0.0677251)(list '0.138989197 '0.141812367 '0.116099162 '0.113201363 '0.118510496 '0.120787163 '0.124447509 '0.126152743)(list '0.244141854 '0.149068993 '0.112096235 '0.078511146 '0.120171311 '0.087628048 '0.117896562 '0.090485852)))
;; This model will not run as the feature priors are not defined.
;; We will define the parameters separately and concatenate with this code.

;(define (goal-prior) (multinomial goals '(0.33 0.33 0.33)))

(define featureSets (list '(1 1 1) '(1 1 0) '(1 0 1) '(1 0 0) '(0 1 1) '(0 1 0) '(0 0 1) '(0 0 0)))

;; Parameters
(define depth 1)

;; Define communicative goals as wanting to communicate something about John's category vs his fierceness
(define goals (list 'goal-feature1 'goal-feature2 'goal-feature3))

(define (sample-featureSet category prior all-categories)
(if (equal? category (first all-categories))
(multinomial featureSets (first prior))
(sample-featureSet category (rest prior) (rest all-categories))
)
)

(define (literal-interpretation utterance category)
(equal? utterance category))


(define (goal-satisfied? goal listener-category-feature1-feature2-feature3 speaker-category speaker-feature1 speaker-feature2 speaker-feature3)
(case goal
(('goal-feature1) (equal? (second listener-category-feature1-feature2-feature3) speaker-feature1))
(('goal-feature2) (equal? (third listener-category-feature1-feature2-feature3) speaker-feature2))
(('goal-feature3) (equal? (fourth listener-category-feature1-feature2-feature3) speaker-feature3))
))


;; The model is currently restricted to hardness=1
(define speaker
(mem (lambda (category feature1 feature2 feature3 goal depth)
(enumeration-query
(define utterance (utterance-prior))
utterance
(goal-satisfied? goal (apply multinomial (listener utterance depth)) category feature1 feature2 feature3)
))))

(define listener
(mem (lambda (utterance depth)
(enumeration-query
(define category (categories-prior))
(define featureSet (sample-featureSet category featureSet-prior categories))
(define feature1 (first featureSet))
(define feature2 (second featureSet))
(define feature3 (third featureSet))
(define speaker-goal (goal-prior))

;(list category fierceness skinniness)
(list category feature1 feature2 feature3)

(if (equal? depth 0)
(literal-interpretation utterance category)
(equal? utterance
(apply multinomial (raise-to-power (speaker category feature1 feature2 feature3 speaker-goal (- depth 1)) alpha))))
))))

(define (raise-to-power speaker-dist alpha)
(list (first speaker-dist) (map (lambda (x) (pow x alpha)) (second speaker-dist))))

(define (sample-one utterance)
(listener utterance depth))

(sample-one 'target)
