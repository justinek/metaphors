(define categories (list 'whale 'person))
(define utterances (list 'whale 'person))
(define (utterance-prior) (multinomial utterances '(0.1 0.1)))
(define (categories-prior) (multinomial categories '(0.01 0.99)))
(define featureSet-prior (list (list '0.30592786494628 '0.138078454222818 '0.179114768847673 '0.13098781834847 '0.0947267162507846 '0.0531420411185539 '0.0601520520596695 '0.0378702842057509) (list '0.11687632453038 '0.105787535267869 '0.11568145784997 '0.130847056136141 '0.15288225956497 '0.128098151176801 '0.114694702836614 '0.135132512637255) ))
;; This model will not run as the feature priors are not defined.
;; We will define the parameters separately and concatenate with this code.

(define (goal-prior) (multinomial goals '(0.33 0.33 0.33)))

(define alpha 3.0)

(define featureSets (list '(1 1 1) '(1 1 0) '(1 0 1) '(1 0 0) '(0 1 1) '(0 1 0) '(0 0 1) '(0 0 0)))

;; Parameters
(define depth 1)

;; Define communicative goals as wanting to communicate something about John's category vs his fierceness
(define goals (list 'goal-feature1 'goal-feature2 'goal-feature3))

(define (sample-featureSet category prior all-categories)
(if (equal? category (first all-categories))
(multinomial featureSets (first prior))
(sample-featureSet category (rest prior) (rest all-categories))
)
)

(define (literal-interpretation utterance category)
(equal? utterance category))


(define (goal-satisfied? goal listener-category-feature1-feature2-feature3 speaker-category speaker-feature1 speaker-feature2 speaker-feature3)
(case goal
(('goal-feature1) (equal? (second listener-category-feature1-feature2-feature3) speaker-feature1))
(('goal-feature2) (equal? (third listener-category-feature1-feature2-feature3) speaker-feature2))
(('goal-feature3) (equal? (fourth listener-category-feature1-feature2-feature3) speaker-feature3))
))


;; The model is currently restricted to hardness=1
(define speaker
(mem (lambda (category feature1 feature2 feature3 goal depth)
(enumeration-query
(define utterance (utterance-prior))
utterance
(goal-satisfied? goal (apply multinomial (listener utterance depth)) category feature1 feature2 feature3)
))))

(define listener
(mem (lambda (utterance depth)
(enumeration-query
(define category (categories-prior))
(define featureSet (sample-featureSet category featureSet-prior categories))
(define feature1 (first featureSet))
(define feature2 (second featureSet))
(define feature3 (third featureSet))
(define speaker-goal (goal-prior))

;(list category fierceness skinniness)
(list category feature1 feature2 feature3)

(if (equal? depth 0)
(literal-interpretation utterance category)
(equal? utterance
(apply multinomial (raise-to-power (speaker category feature1 feature2 feature3 speaker-goal (- depth 1)) alpha))))
))))

(define (raise-to-power speaker-dist alpha)
(list (first speaker-dist) (map (lambda (x) (pow x alpha)) (second speaker-dist))))

(define (sample-one utterance)
(listener utterance depth))

(sample-one 'whale)
