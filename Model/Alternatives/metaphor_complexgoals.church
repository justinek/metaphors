(define categories (list 'whale 'person))
(define utterances (list 'whale 'f1-1 'f1-0 'f2-1 'f2-0))
(define (utterance-prior) (multinomial utterances '(0.1 0.1 0.1 0.1 0.1)))
(define (categories-prior) (multinomial categories '(0.0001 0.9998)))
(define featureSet-prior (list (list '0.9 0.01 0.01 0.01) 
                               (list '0.25 '0.25 '0.25 '0.25)))
                               
                              
(define (filter pred lst)
 (fold (lambda (x y)
         (if (pred x)
             (pair x y)
             y))
       '()
       lst))

(define (zip a b)
  (if (equal? (length a) 0)
      '()
      (pair (list (first a) (first b)) (zip (rest a) (rest b)))))

(define (goal-prior) (multinomial goals '(0.33 0.33 0.33)))


                               ; large, graceful, magnificent

(define featureSets (list '(1 1) '(1 0) '(0 1) '(0 0)))
;; Parameters


;; Define communicative goals as wanting to communicate something about John's category vs his fierceness
(define goals (list 'goal-feature1 'goal-feature2 'goal-both))

(define (sample-featureSet category prior all-categories)
(if (equal? category (first all-categories))
(multinomial featureSets (first prior))
(sample-featureSet category (rest prior) (rest all-categories))
)
)

(define (literal-interpretation utterance category feature1 feature2)
  (case utterance
    (('whale) (equal? utterance category))
    (('f1-1) (equal? feature1 1))
    (('f1-0) (equal? feature1 0))
    (('f2-1) (equal? feature2 1))
    (('f2-0) (equal? feature2 0))
    ))


(define (goal-satisfied? goal listener-category-feature1-feature2 
  speaker-category speaker-feature1 speaker-feature2)
(case goal
(('goal-feature1) (equal? (second listener-category-feature1-feature2) speaker-feature1))
(('goal-feature2) (equal? (third listener-category-feature1-feature2) speaker-feature2))
(('goal-both) (and (equal? (second listener-category-feature1-feature2) speaker-feature1) 
                   (equal? (third listener-category-feature1-feature2) speaker-feature2)))
;(('goal-feature1) (equal? goal goal))
;(('goal-feature2) (equal? goal goal))
;(('goal-both) (equal? goal goal))

))


;; The model is currently restricted to hardness=1
(define speaker
(mem (lambda (category feature1 feature2 goal depth)
(enumeration-query
(define utterance (utterance-prior))
utterance
(goal-satisfied? goal (apply multinomial (listener utterance depth)) category feature1 feature2)
))))

(define listener
(mem (lambda (utterance depth)
(enumeration-query  
(define category (categories-prior))
(define featureSet (sample-featureSet category featureSet-prior categories))
(define feature1 (first featureSet))
(define feature2 (second featureSet))
(define speaker-goal (goal-prior))

;(list category fierceness skinniness)
(list category feature1 feature2)

(if (equal? depth 0)
(literal-interpretation utterance category feature1 feature2)
(equal? utterance
(apply multinomial (raise-to-power (speaker category feature1 feature2 speaker-goal (- depth 1)) alpha))))
))))

(define (raise-to-power speaker-dist alpha)
(list (first speaker-dist) (map (lambda (x) (pow x alpha)) (second speaker-dist))))

(define (sample-one utterance)
(listener utterance depth))


(define depth 15)
(define alpha 1.0)


;(goal-satisfied? (goal-prior) (listener 'whale 0) (categories-prior) 1 1)
(zip (first (sample-one 'whale)) (second (sample-one 'whale)))