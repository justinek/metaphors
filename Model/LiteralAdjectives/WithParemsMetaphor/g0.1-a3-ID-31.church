(define (goal-prior) (multinomial goals '(0.6 0.5 0.5 0.6 0.6 0.5 0.6)))
(define alpha 3)
(define categories (list 'person 'target))
(define utterances (list 'target 'f1-1 'f1-0 'f2-1 'f2-0 'f3-1 'f3-0))
(define (utterance-prior) (multinomial utterances '(0.1 0.1 0.1 0.1 0.1 0.1 0.1)))
(define (categories-prior) (multinomial categories '(0.99 0.01)))
(define featureSet-prior (list(list '0.172207937 '0.116378649 '0.084766842 '0.121804129 '0.14331456 '0.103270674 '0.096580138 '0.16167707)(list '0.267846046 '0.12427729 '0.108568898 '0.119646182 '0.113212353 '0.074880311 '0.076252611 '0.115316309)))
;; This model will not run as the feature priors are not defined.
;; We will define the parameters separately and concatenate with this code.

;(define (goal-prior) (multinomial goals '(0.33 0.33 0.33)))

(define featureSets (list '(1 1 1) '(1 1 0) '(1 0 1) '(1 0 0) '(0 1 1) '(0 1 0) '(0 0 1) '(0 0 0)))

;; Parameters
(define depth 1)

;; Define communicative goals as wanting to communicate something about John's category vs his fierceness
(define goals (list 'goal-f1 'goal-f2 'goal-f3 'goal-f1-f2 'goal-f1-f3 'goal-f2-f3 'goal-all))

(define (sample-featureSet category prior all-categories)
(if (equal? category (first all-categories))
(multinomial featureSets (first prior))
(sample-featureSet category (rest prior) (rest all-categories))
)
)

(define (literal-interpretation utterance category feature1 feature2 feature3)
(case utterance
(('target) (equal? utterance category))
(('f1-1) (equal? feature1 1))
(('f1-0) (equal? feature1 0))
(('f2-1) (equal? feature2 1))
(('f2-0) (equal? feature2 0))
(('f3-1) (equal? feature3 1))
(('f3-0) (equal? feature3 0))
)
)

(define (goal-satisfied? goal listener-category-feature1-feature2-feature3 speaker-category speaker-feature1 speaker-feature2 speaker-feature3)
(case goal
(('goal-f1) (equal? (second listener-category-feature1-feature2-feature3) speaker-feature1))
(('goal-f2) (equal? (third listener-category-feature1-feature2-feature3) speaker-feature2))
(('goal-f3) (equal? (fourth listener-category-feature1-feature2-feature3) speaker-feature3))
(('goal-f1-f2) (and (equal? (second listener-category-feature1-feature2-feature3) speaker-feature1)
(equal? (third listener-category-feature1-feature2-feature3) speaker-feature2)))
(('goal-f1-f3) (and (equal? (second listener-category-feature1-feature2-feature3) speaker-feature1)
(equal? (fourth listener-category-feature1-feature2-feature3) speaker-feature3)))
(('goal-f2-f3) (and (equal? (third listener-category-feature1-feature2-feature3) speaker-feature2)
(equal? (fourth listener-category-feature1-feature2-feature3) speaker-feature3)))
(('goal-all) (and (and (equal? (second listener-category-feature1-feature2-feature3) speaker-feature1)
(equal? (third listener-category-feature1-feature2-feature3) speaker-feature2))
(equal? (fourth listener-category-feature1-feature2-feature3) speaker-feature3)))
))


;; The model is currently restricted to hardness=1
(define speaker
(mem (lambda (category feature1 feature2 feature3 goal depth)
(enumeration-query
(define utterance (utterance-prior))
utterance
(goal-satisfied? goal (apply multinomial (listener utterance depth)) category feature1 feature2 feature3)
))))

(define listener
(mem (lambda (utterance depth)
(enumeration-query
(define category (categories-prior))
(define featureSet (sample-featureSet category featureSet-prior categories))
(define feature1 (first featureSet))
(define feature2 (second featureSet))
(define feature3 (third featureSet))
(define speaker-goal (goal-prior))

;(list category fierceness skinniness)
(list category feature1 feature2 feature3 speaker-goal)

(if (equal? depth 0)
(literal-interpretation utterance category feature1 feature2 feature3)
(equal? utterance
(apply multinomial (raise-to-power (speaker category feature1 feature2 feature3 speaker-goal (- depth 1)) alpha))))
))))

(define (raise-to-power speaker-dist alpha)
(list (first speaker-dist) (map (lambda (x) (pow x alpha)) (second speaker-dist))))

(define (sample-one utterance)
(listener utterance depth))

(sample-one 'target)
