(define categories (list 'turtle 'whale 'armadillo 'elephant 'man))
(define (categories-prior) (multinomial categories '(0.0025 0.0025 0.0025 0.0025 0.99)))
(define utterances categories)
(define costs '(1 1 1 1 1))
(define (utterance-prior) (multinomial utterances (map (lambda (utterance-cost) (exp (- utterance-cost))) costs)))
(define majestic (list 0 1 2 3 4 5))
(define (majestic-prior category)
(case category
	(('turtle) (multinomial majestic (list 0.25 0.2 0.25 0.05 0.15 0.1)))
	(('whale) (multinomial majestic (list 0.1 0.05 0.1 0.3 0.15 0.3)))
	(('armadillo) (multinomial majestic (list 0.3 0.3 0.15 0.1 0.1 0.05)))
	(('elephant) (multinomial majestic (list 0.05 0.05 0.2 0.1 0.25 0.35)))
	(('man) (multinomial majestic (list 0.25 0.15 0.2 0.1 0.15 0.15)))
))
(define big (list 0 1 2 3 4 5))
(define (big-prior category)
(case category
	(('turtle) (multinomial big (list 0.529411764705882 0.117647058823529 0.117647058823529 0.0588235294117647 0.0588235294117647 0.117647058823529)))
	(('whale) (multinomial big (list 0.0588235294117647 0.0588235294117647 0.117647058823529 0.0588235294117647 0.0588235294117647 0.647058823529412)))
	(('armadillo) (multinomial big (list 0.294117647058824 0.235294117647059 0.235294117647059 0.117647058823529 0.0588235294117647 0.0588235294117647)))
	(('elephant) (multinomial big (list 0.0588235294117647 0.0588235294117647 0.0588235294117647 0.0588235294117647 0.352941176470588 0.411764705882353)))
	(('man) (multinomial big (list 0.117647058823529 0.176470588235294 0.470588235294118 0.117647058823529 0.0588235294117647 0.0588235294117647)))
))
(define slow (list 0 1 2 3 4 5))
(define (slow-prior category)
(case category
	(('turtle) (multinomial slow (list 0.0454545454545455 0.0909090909090909 0.0454545454545455 0.0454545454545455 0.136363636363636 0.636363636363636)))
	(('whale) (multinomial slow (list 0.136363636363636 0.227272727272727 0.0909090909090909 0.136363636363636 0.363636363636364 0.0454545454545455)))
	(('armadillo) (multinomial slow (list 0.0909090909090909 0.136363636363636 0.0909090909090909 0.136363636363636 0.227272727272727 0.318181818181818)))
	(('elephant) (multinomial slow (list 0.0454545454545455 0.0454545454545455 0.227272727272727 0.181818181818182 0.272727272727273 0.227272727272727)))
	(('man) (multinomial slow (list 0.181818181818182 0.227272727272727 0.227272727272727 0.136363636363636 0.0909090909090909 0.136363636363636)))
))
(define hard (list 0 1 2 3 4 5))
(define (hard-prior category)
(case category
	(('turtle) (multinomial hard (list 0.0416666666666667 0.125 0.0833333333333333 0.0833333333333333 0.208333333333333 0.458333333333333)))
	(('whale) (multinomial hard (list 0.208333333333333 0.125 0.25 0.25 0.0416666666666667 0.125)))
	(('armadillo) (multinomial hard (list 0.0833333333333333 0.0833333333333333 0.0833333333333333 0.0833333333333333 0.125 0.541666666666667)))
	(('elephant) (multinomial hard (list 0.208333333333333 0.125 0.0833333333333333 0.25 0.25 0.0833333333333333)))
	(('man) (multinomial hard (list 0.333333333333333 0.208333333333333 0.208333333333333 0.125 0.0416666666666667 0.0833333333333333)))
))
(define strong (list 0 1 2 3 4 5))
(define (strong-prior category)
(case category
	(('turtle) (multinomial strong (list 0.523809523809524 0.238095238095238 0.0476190476190476 0.0476190476190476 0.0952380952380952 0.0476190476190476)))
	(('whale) (multinomial strong (list 0.0476190476190476 0.0952380952380952 0.142857142857143 0.0952380952380952 0.19047619047619 0.428571428571429)))
	(('armadillo) (multinomial strong (list 0.428571428571429 0.238095238095238 0.0476190476190476 0.0952380952380952 0.142857142857143 0.0476190476190476)))
	(('elephant) (multinomial strong (list 0.0952380952380952 0.0476190476190476 0.0952380952380952 0.142857142857143 0.0476190476190476 0.571428571428571)))
	(('man) (multinomial strong (list 0.142857142857143 0.19047619047619 0.238095238095238 0.19047619047619 0.142857142857143 0.0952380952380952)))
))
(define goals (list 'category? 'majestic? 'big? 'slow? 'hard? 'strong?))
(define (goal-prior) (uniform-draw goals))
(define lit-listener (mem (lambda (utterance goal)
(enumeration-query
(define category utterance)
(define feature
	(case goal
		(('category?) category)
		(('majestic?) (majestic-prior category))
		(('big?) (big-prior category))
		(('slow?) (slow-prior category))
		(('hard?) (hard-prior category))
		(('strong?) (strong-prior category))
))
feature
#t))))
(define speaker (mem (lambda 
(category majestic big slow hard strong goal)
(enumeration-query
(define utterance (utterance-prior))
(define dimension
	(case goal
		(('category?) category)
		(('majestic?) majestic)
		(('big?) big)
		(('slow?) slow)
		(('hard?) hard)
		(('strong?) strong)
))
utterance
(equal? (apply multinomial (lit-listener utterance goal)) dimension)))))
(define listener (mem (lambda (utterance)
(enumeration-query
(define category (categories-prior))
(define majestic (majestic-prior category))
(define big (big-prior category))
(define slow (slow-prior category))
(define hard (hard-prior category))
(define strong (strong-prior category))
(define speaker-goal (goal-prior))
(list category majestic big slow hard strong)
(equal? utterance (apply multinomial (raise-to-power (speaker category majestic big slow hard strong speaker-goal) alpha)))))))
(define (raise-to-power speaker-dist alpha) (list (first speaker-dist) (map (lambda (x) (pow x alpha)) (second speaker-dist))))
(define alpha 1)
(define interpretation (listener 'elephant))
(write-csv (map flatten (zip (first interpretation) (second interpretation))) '/Users/justinek/Dropbox/Work/Grad_school/Research/Metaphor/metaphors/Model/SeedingModel/CoreAnimalsOutput/elephant_6_1.csv)
