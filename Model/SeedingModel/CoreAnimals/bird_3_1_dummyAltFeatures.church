(define categories (list 'ant 'cheetah 'mouse 'jaguar 'bird 'man))
(define (categories-prior) (multinomial categories '(0.002 0.002 0.002 0.002 0.002 0.99)))
(define utterances categories)
(define costs '(1 1 1 1 1 1))
(define (utterance-prior) (multinomial utterances (map (lambda (utterance-cost) (exp (- utterance-cost))) costs)))
(define industrious (list 0 1 2))
(define (industrious-prior category)
(case category
	(('ant) (multinomial industrious (list 1 1 1)))
	(('cheetah) (multinomial industrious (list 1 1 1)))
	(('mouse) (multinomial industrious (list 1 1 1)))
	(('jaguar) (multinomial industrious (list 1 1 1)))
	(('bird) (multinomial industrious (list 1 1 1)))
	(('man) (multinomial industrious (list 1 1 1)))
))
(define agile (list 0 1 2))
(define (agile-prior category)
(case category
	(('ant) (multinomial agile (list 1 1 1)))
	(('cheetah) (multinomial agile (list 1 1 1)))
	(('mouse) (multinomial agile (list 1 1 1)))
	(('jaguar) (multinomial agile (list 1 1 1)))
	(('bird) (multinomial agile (list 1 1 1)))
	(('man) (multinomial agile (list 1 1 1)))
))
(define quiet (list 0 1 2))
(define (quiet-prior category)
(case category
	(('ant) (multinomial quiet (list 1 1 1)))
	(('cheetah) (multinomial quiet (list 1 1 1)))
	(('mouse) (multinomial quiet (list 1 1 1)))
	(('jaguar) (multinomial quiet (list 1 1 1)))
	(('bird) (multinomial quiet (list 1 1 1)))
	(('man) (multinomial quiet (list 1 1 1)))
))
(define fast (list 0 1 2))
(define (fast-prior category)
(case category
	(('ant) (multinomial fast (list 0.6875 0.25 0.0625)))
	(('cheetah) (multinomial fast (list 0.0625 0.125 0.8125)))
	(('mouse) (multinomial fast (list 0.5 0.375 0.125)))
	(('jaguar) (multinomial fast (list 0.0625 0.375 0.5625)))
	(('bird) (multinomial fast (list 0.3125 0.4375 0.25)))
	(('man) (multinomial fast (list 0.375 0.3125 0.3125)))
))
(define sleek (list 0 1 2))
(define (sleek-prior category)
(case category
	(('ant) (multinomial sleek (list 1 1 1)))
	(('cheetah) (multinomial sleek (list 1 1 1)))
	(('mouse) (multinomial sleek (list 1 1 1)))
	(('jaguar) (multinomial sleek (list 1 1 1)))
	(('bird) (multinomial sleek (list 1 1 1)))
	(('man) (multinomial sleek (list 1 1 1)))
))
(define small (list 0 1 2))
(define (small-prior category)
(case category
	(('ant) (multinomial small (list 0.111111111111111 0.0555555555555556 0.833333333333333)))
	(('cheetah) (multinomial small (list 0.277777777777778 0.555555555555556 0.166666666666667)))
	(('mouse) (multinomial small (list 0.0555555555555556 0.0555555555555556 0.888888888888889)))
	(('jaguar) (multinomial small (list 0.277777777777778 0.611111111111111 0.111111111111111)))
	(('bird) (multinomial small (list 0.111111111111111 0.0555555555555556 0.833333333333333)))
	(('man) (multinomial small (list 0.222222222222222 0.611111111111111 0.166666666666667)))
))
(define goals (list 'category? 'industrious? 'agile? 'quiet? 'fast? 'sleek? 'small?))
(define (goal-prior) (uniform-draw goals))
(define lit-listener (mem (lambda (utterance goal)
(enumeration-query
(define category utterance)
(define feature
	(case goal
		(('category?) category)
		(('industrious?) (industrious-prior category))
		(('agile?) (agile-prior category))
		(('quiet?) (quiet-prior category))
		(('fast?) (fast-prior category))
		(('sleek?) (sleek-prior category))
		(('small?) (small-prior category))
))
feature
#t))))
(define speaker (mem (lambda 
(category industrious agile quiet fast sleek small goal)
(enumeration-query
(define utterance (utterance-prior))
(define dimension
	(case goal
		(('category?) category)
		(('industrious?) industrious)
		(('agile?) agile)
		(('quiet?) quiet)
		(('fast?) fast)
		(('sleek?) sleek)
		(('small?) small)
))
utterance
(equal? (apply multinomial (lit-listener utterance goal)) dimension)))))
(define listener (mem (lambda (utterance)
(enumeration-query
(define category (categories-prior))
(define industrious (industrious-prior category))
(define agile (agile-prior category))
(define quiet (quiet-prior category))
(define fast (fast-prior category))
(define sleek (sleek-prior category))
(define small (small-prior category))
(define speaker-goal (goal-prior))
(list category industrious agile quiet fast sleek small)
(equal? utterance (apply multinomial (raise-to-power (speaker category industrious agile quiet fast sleek small speaker-goal) alpha)))))))
(define (raise-to-power speaker-dist alpha) (list (first speaker-dist) (map (lambda (x) (pow x alpha)) (second speaker-dist))))
(define alpha 1)
(define interpretation (listener 'bird))
(write-csv (append (list (list 'category 'industrious 'agile 'quiet 'fast 'sleek 'small 'prob)) (map flatten (zip (first interpretation) (second interpretation)))) '/Users/justinek/Dropbox/Work/Grad_school/Research/Metaphor/metaphors/Model/SeedingModel/CoreAnimalsOutput/bird_3_1_dummyAltFeatures.csv)