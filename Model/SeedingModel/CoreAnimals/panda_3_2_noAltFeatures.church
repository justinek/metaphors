(define categories (list 'elephant 'dog 'cat 'kitten 'whale 'panda 'man))
(define (categories-prior) (multinomial categories '(0.00166666666667 0.00166666666667 0.00166666666667 0.00166666666667 0.00166666666667 0.00166666666667 0.99)))
(define utterances categories)
(define costs '(1 1 1 1 1 1 1))
(define (utterance-prior) (multinomial utterances (map (lambda (utterance-cost) (exp (- utterance-cost))) costs)))
(define cute (list 0 1 2))
(define (cute-prior category)
(case category
	(('elephant) (multinomial cute (list 0.4 0.35 0.25)))
	(('dog) (multinomial cute (list 0.1 0.2 0.7)))
	(('cat) (multinomial cute (list 0.05 0.3 0.65)))
	(('kitten) (multinomial cute (list 0.05 0.2 0.75)))
	(('whale) (multinomial cute (list 0.6 0.2 0.2)))
	(('panda) (multinomial cute (list 0.05 0.35 0.6)))
	(('man) (multinomial cute (list 0.3 0.4 0.3)))
))
(define big (list 0 1 2))
(define (big-prior category)
(case category
	(('elephant) (multinomial big (list 0.0714285714285714 0.0714285714285714 0.857142857142857)))
	(('dog) (multinomial big (list 0.571428571428571 0.357142857142857 0.0714285714285714)))
	(('cat) (multinomial big (list 0.714285714285714 0.214285714285714 0.0714285714285714)))
	(('kitten) (multinomial big (list 0.785714285714286 0.142857142857143 0.0714285714285714)))
	(('whale) (multinomial big (list 0.0714285714285714 0.142857142857143 0.785714285714286)))
	(('panda) (multinomial big (list 0.142857142857143 0.714285714285714 0.142857142857143)))
	(('man) (multinomial big (list 0.285714285714286 0.642857142857143 0.0714285714285714)))
))
(define goals (list 'category? 'cute? 'big?))
(define (goal-prior) (uniform-draw goals))
(define lit-listener (mem (lambda (utterance goal)
(enumeration-query
(define category utterance)
(define feature
	(case goal
		(('category?) category)
		(('cute?) (cute-prior category))
		(('big?) (big-prior category))
))
feature
#t))))
(define speaker (mem (lambda 
(category cute big goal)
(enumeration-query
(define utterance (utterance-prior))
(define dimension
	(case goal
		(('category?) category)
		(('cute?) cute)
		(('big?) big)
))
utterance
(equal? (apply multinomial (lit-listener utterance goal)) dimension)))))
(define listener (mem (lambda (utterance)
(enumeration-query
(define category (categories-prior))
(define cute (cute-prior category))
(define big (big-prior category))
(define speaker-goal (goal-prior))
(list category cute big)
(equal? utterance (apply multinomial (raise-to-power (speaker category cute big speaker-goal) alpha)))))))
(define (raise-to-power speaker-dist alpha) (list (first speaker-dist) (map (lambda (x) (pow x alpha)) (second speaker-dist))))
(define alpha 2)
(define interpretation (listener 'panda))
(write-csv (append (list (list 'category 'cute 'big 'prob)) (map flatten (zip (first interpretation) (second interpretation)))) '/Users/justinek/Dropbox/Work/Grad_school/Research/Metaphor/metaphors/Model/SeedingModel/CoreAnimalsOutput/panda_3_2_noAltFeatures.csv)