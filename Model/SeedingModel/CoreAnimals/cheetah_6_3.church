(define categories (list 'cheetah 'deer 'jaguar 'monkey 'cat 'man))
(define (categories-prior) (multinomial categories '(0.002 0.002 0.002 0.002 0.002 0.99)))
(define utterances categories)
(define costs '(1 1 1 1 1 1))
(define (utterance-prior) (multinomial utterances (map (lambda (utterance-cost) (exp (- utterance-cost))) costs)))
(define funny (list 0 1 2 3 4 5))
(define (funny-prior category)
(case category
	(('cheetah) (multinomial funny (list 0.35 0.1 0.3 0.1 0.1 0.05)))
	(('deer) (multinomial funny (list 0.45 0.1 0.2 0.1 0.1 0.05)))
	(('jaguar) (multinomial funny (list 0.3 0.25 0.2 0.1 0.1 0.05)))
	(('monkey) (multinomial funny (list 0.2 0.05 0.2 0.15 0.1 0.3)))
	(('cat) (multinomial funny (list 0.2 0.05 0.2 0.15 0.2 0.2)))
	(('man) (multinomial funny (list 0.1 0.05 0.15 0.2 0.2 0.3)))
))
(define lazy (list 0 1 2 3 4 5))
(define (lazy-prior category)
(case category
	(('cheetah) (multinomial lazy (list 0.304347826086957 0.217391304347826 0.304347826086957 0.0434782608695652 0.0869565217391304 0.0434782608695652)))
	(('deer) (multinomial lazy (list 0.260869565217391 0.304347826086957 0.217391304347826 0.130434782608696 0.0434782608695652 0.0434782608695652)))
	(('jaguar) (multinomial lazy (list 0.260869565217391 0.304347826086957 0.130434782608696 0.130434782608696 0.130434782608696 0.0434782608695652)))
	(('monkey) (multinomial lazy (list 0.173913043478261 0.217391304347826 0.173913043478261 0.260869565217391 0.0869565217391304 0.0869565217391304)))
	(('cat) (multinomial lazy (list 0.0869565217391304 0.130434782608696 0.173913043478261 0.0869565217391304 0.173913043478261 0.347826086956522)))
	(('man) (multinomial lazy (list 0.173913043478261 0.130434782608696 0.0869565217391304 0.173913043478261 0.304347826086957 0.130434782608696)))
))
(define cute (list 0 1 2 3 4 5))
(define (cute-prior category)
(case category
	(('cheetah) (multinomial cute (list 0.217391304347826 0.260869565217391 0.217391304347826 0.130434782608696 0.130434782608696 0.0434782608695652)))
	(('deer) (multinomial cute (list 0.217391304347826 0.217391304347826 0.173913043478261 0.173913043478261 0.130434782608696 0.0869565217391304)))
	(('jaguar) (multinomial cute (list 0.217391304347826 0.173913043478261 0.391304347826087 0.0869565217391304 0.0869565217391304 0.0434782608695652)))
	(('monkey) (multinomial cute (list 0.173913043478261 0.0869565217391304 0.173913043478261 0.260869565217391 0.217391304347826 0.0869565217391304)))
	(('cat) (multinomial cute (list 0.0434782608695652 0.0434782608695652 0.130434782608696 0.173913043478261 0.347826086956522 0.260869565217391)))
	(('man) (multinomial cute (list 0.130434782608696 0.173913043478261 0.217391304347826 0.173913043478261 0.173913043478261 0.130434782608696)))
))
(define agile (list 0 1 2 3 4 5))
(define (agile-prior category)
(case category
	(('cheetah) (multinomial agile (list 0.0526315789473684 0.0526315789473684 0.210526315789474 0.105263157894737 0.157894736842105 0.421052631578947)))
	(('deer) (multinomial agile (list 0.0526315789473684 0.157894736842105 0.105263157894737 0.315789473684211 0.210526315789474 0.157894736842105)))
	(('jaguar) (multinomial agile (list 0.0526315789473684 0.157894736842105 0.105263157894737 0.105263157894737 0.210526315789474 0.368421052631579)))
	(('monkey) (multinomial agile (list 0.0526315789473684 0.0526315789473684 0.210526315789474 0.315789473684211 0.105263157894737 0.263157894736842)))
	(('cat) (multinomial agile (list 0.0526315789473684 0.157894736842105 0.263157894736842 0.157894736842105 0.105263157894737 0.263157894736842)))
	(('man) (multinomial agile (list 0.105263157894737 0.105263157894737 0.263157894736842 0.263157894736842 0.157894736842105 0.105263157894737)))
))
(define fast (list 0 1 2 3 4 5))
(define (fast-prior category)
(case category
	(('cheetah) (multinomial fast (list 0.0526315789473684 0.0526315789473684 0.0526315789473684 0.105263157894737 0.157894736842105 0.578947368421053)))
	(('deer) (multinomial fast (list 0.0526315789473684 0.157894736842105 0.210526315789474 0.315789473684211 0.105263157894737 0.157894736842105)))
	(('jaguar) (multinomial fast (list 0.0526315789473684 0.0526315789473684 0.210526315789474 0.157894736842105 0.263157894736842 0.263157894736842)))
	(('monkey) (multinomial fast (list 0.0526315789473684 0.263157894736842 0.263157894736842 0.263157894736842 0.105263157894737 0.0526315789473684)))
	(('cat) (multinomial fast (list 0.105263157894737 0.105263157894737 0.315789473684211 0.263157894736842 0.105263157894737 0.105263157894737)))
	(('man) (multinomial fast (list 0.105263157894737 0.263157894736842 0.157894736842105 0.157894736842105 0.263157894736842 0.0526315789473684)))
))
(define sleek (list 0 1 2 3 4 5))
(define (sleek-prior category)
(case category
	(('cheetah) (multinomial sleek (list 0.16 0.12 0.08 0.24 0.2 0.2)))
	(('deer) (multinomial sleek (list 0.24 0.08 0.32 0.24 0.04 0.08)))
	(('jaguar) (multinomial sleek (list 0.12 0.12 0.2 0.16 0.2 0.2)))
	(('monkey) (multinomial sleek (list 0.24 0.32 0.16 0.12 0.12 0.04)))
	(('cat) (multinomial sleek (list 0.12 0.16 0.16 0.24 0.16 0.16)))
	(('man) (multinomial sleek (list 0.08 0.32 0.16 0.16 0.16 0.12)))
))
(define dumb (list 0 1 2 3 4 5))
(define (dumb-prior category)
(case category
	(('cheetah) (multinomial dumb (list 0.222222222222222 0.333333333333333 0.277777777777778 0.0555555555555556 0.0555555555555556 0.0555555555555556)))
	(('deer) (multinomial dumb (list 0.111111111111111 0.166666666666667 0.222222222222222 0.277777777777778 0.111111111111111 0.111111111111111)))
	(('jaguar) (multinomial dumb (list 0.222222222222222 0.333333333333333 0.277777777777778 0.0555555555555556 0.0555555555555556 0.0555555555555556)))
	(('monkey) (multinomial dumb (list 0.388888888888889 0.166666666666667 0.277777777777778 0.0555555555555556 0.0555555555555556 0.0555555555555556)))
	(('cat) (multinomial dumb (list 0.277777777777778 0.277777777777778 0.222222222222222 0.111111111111111 0.0555555555555556 0.0555555555555556)))
	(('man) (multinomial dumb (list 0.444444444444444 0.222222222222222 0.111111111111111 0.111111111111111 0.0555555555555556 0.0555555555555556)))
))
(define smart (list 0 1 2 3 4 5))
(define (smart-prior category)
(case category
	(('cheetah) (multinomial smart (list 0.0833333333333333 0.0833333333333333 0.25 0.416666666666667 0.0833333333333333 0.0833333333333333)))
	(('deer) (multinomial smart (list 0.166666666666667 0.208333333333333 0.208333333333333 0.25 0.125 0.0416666666666667)))
	(('jaguar) (multinomial smart (list 0.0833333333333333 0.0416666666666667 0.416666666666667 0.208333333333333 0.208333333333333 0.0416666666666667)))
	(('monkey) (multinomial smart (list 0.0416666666666667 0.0416666666666667 0.166666666666667 0.291666666666667 0.25 0.208333333333333)))
	(('cat) (multinomial smart (list 0.0833333333333333 0.125 0.125 0.25 0.375 0.0416666666666667)))
	(('man) (multinomial smart (list 0.0416666666666667 0.0416666666666667 0.0833333333333333 0.125 0.0833333333333333 0.625)))
))
(define goals (list 'category? 'funny? 'lazy? 'cute? 'agile? 'fast? 'sleek? 'dumb? 'smart?))
(define (goal-prior) (uniform-draw goals))
(define lit-listener (mem (lambda (utterance goal)
(enumeration-query
(define category utterance)
(define feature
	(case goal
		(('category?) category)
		(('funny?) (funny-prior category))
		(('lazy?) (lazy-prior category))
		(('cute?) (cute-prior category))
		(('agile?) (agile-prior category))
		(('fast?) (fast-prior category))
		(('sleek?) (sleek-prior category))
		(('dumb?) (dumb-prior category))
		(('smart?) (smart-prior category))
))
feature
#t))))
(define speaker (mem (lambda 
(category funny lazy cute agile fast sleek dumb smart goal)
(enumeration-query
(define utterance (utterance-prior))
(define dimension
	(case goal
		(('category?) category)
		(('funny?) funny)
		(('lazy?) lazy)
		(('cute?) cute)
		(('agile?) agile)
		(('fast?) fast)
		(('sleek?) sleek)
		(('dumb?) dumb)
		(('smart?) smart)
))
utterance
(equal? (apply multinomial (lit-listener utterance goal)) dimension)))))
(define listener (mem (lambda (utterance)
(enumeration-query
(define category (categories-prior))
(define funny (funny-prior category))
(define lazy (lazy-prior category))
(define cute (cute-prior category))
(define agile (agile-prior category))
(define fast (fast-prior category))
(define sleek (sleek-prior category))
(define dumb (dumb-prior category))
(define smart (smart-prior category))
(define speaker-goal (goal-prior))
(list category funny lazy cute agile fast sleek dumb smart)
(equal? utterance (apply multinomial (raise-to-power (speaker category funny lazy cute agile fast sleek dumb smart speaker-goal) alpha)))))))
(define (raise-to-power speaker-dist alpha) (list (first speaker-dist) (map (lambda (x) (pow x alpha)) (second speaker-dist))))
(define alpha 3)
(define interpretation (listener 'cheetah))
(write-csv (map flatten (zip (first interpretation) (second interpretation))) '/Users/justinek/Dropbox/Work/Grad_school/Research/Metaphor/metaphors/Model/SeedingModel/CoreAnimalsOutput/cheetah_6_3.csv)