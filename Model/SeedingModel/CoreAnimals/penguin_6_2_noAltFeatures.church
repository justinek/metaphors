(define categories (list 'monkey 'dog 'cat 'hyena 'kitten 'penguin 'man))
(define (categories-prior) (multinomial categories '(0.00166666666667 0.00166666666667 0.00166666666667 0.00166666666667 0.00166666666667 0.00166666666667 0.99)))
(define utterances categories)
(define costs '(1 1 1 1 1 1 1))
(define (utterance-prior) (multinomial utterances (map (lambda (utterance-cost) (exp (- utterance-cost))) costs)))
(define funny (list 0 1 2 3 4 5))
(define (funny-prior category)
(case category
	(('monkey) (multinomial funny (list 0.2 0.05 0.2 0.15 0.1 0.3)))
	(('dog) (multinomial funny (list 0.1 0.05 0.15 0.25 0.35 0.1)))
	(('cat) (multinomial funny (list 0.2 0.05 0.2 0.15 0.2 0.2)))
	(('hyena) (multinomial funny (list 0.15 0.25 0.15 0.2 0.15 0.1)))
	(('kitten) (multinomial funny (list 0.1 0.1 0.15 0.15 0.25 0.25)))
	(('penguin) (multinomial funny (list 0.15 0.1 0.1 0.2 0.3 0.15)))
	(('man) (multinomial funny (list 0.1 0.05 0.15 0.2 0.2 0.3)))
))
(define cute (list 0 1 2 3 4 5))
(define (cute-prior category)
(case category
	(('monkey) (multinomial cute (list 0.173913043478261 0.0869565217391304 0.173913043478261 0.260869565217391 0.217391304347826 0.0869565217391304)))
	(('dog) (multinomial cute (list 0.0434782608695652 0.0869565217391304 0.0869565217391304 0.130434782608696 0.347826086956522 0.304347826086957)))
	(('cat) (multinomial cute (list 0.0434782608695652 0.0434782608695652 0.130434782608696 0.173913043478261 0.347826086956522 0.260869565217391)))
	(('hyena) (multinomial cute (list 0.521739130434783 0.130434782608696 0.130434782608696 0.0869565217391304 0.0869565217391304 0.0434782608695652)))
	(('kitten) (multinomial cute (list 0.0434782608695652 0.0434782608695652 0.0434782608695652 0.173913043478261 0.130434782608696 0.565217391304348)))
	(('penguin) (multinomial cute (list 0.0869565217391304 0.0869565217391304 0.173913043478261 0.130434782608696 0.304347826086957 0.217391304347826)))
	(('man) (multinomial cute (list 0.130434782608696 0.173913043478261 0.217391304347826 0.173913043478261 0.173913043478261 0.130434782608696)))
))
(define goals (list 'category? 'funny? 'cute?))
(define (goal-prior) (uniform-draw goals))
(define lit-listener (mem (lambda (utterance goal)
(enumeration-query
(define category utterance)
(define feature
	(case goal
		(('category?) category)
		(('funny?) (funny-prior category))
		(('cute?) (cute-prior category))
))
feature
#t))))
(define speaker (mem (lambda 
(category funny cute goal)
(enumeration-query
(define utterance (utterance-prior))
(define dimension
	(case goal
		(('category?) category)
		(('funny?) funny)
		(('cute?) cute)
))
utterance
(equal? (apply multinomial (lit-listener utterance goal)) dimension)))))
(define listener (mem (lambda (utterance)
(enumeration-query
(define category (categories-prior))
(define funny (funny-prior category))
(define cute (cute-prior category))
(define speaker-goal (goal-prior))
(list category funny cute)
(equal? utterance (apply multinomial (raise-to-power (speaker category funny cute speaker-goal) alpha)))))))
(define (raise-to-power speaker-dist alpha) (list (first speaker-dist) (map (lambda (x) (pow x alpha)) (second speaker-dist))))
(define alpha 2)
(define interpretation (listener 'penguin))
(write-csv (append (list (list 'category 'funny 'cute 'prob)) (map flatten (zip (first interpretation) (second interpretation)))) '/Users/justinek/Dropbox/Work/Grad_school/Research/Metaphor/metaphors/Model/SeedingModel/CoreAnimalsOutput/penguin_6_2_noAltFeatures.csv)