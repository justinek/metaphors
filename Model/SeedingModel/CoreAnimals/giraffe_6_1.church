(define categories (list 'horse 'giraffe 'snake 'man))
(define (categories-prior) (multinomial categories '(0.00333333333333 0.00333333333333 0.00333333333333 0.99)))
(define utterances categories)
(define costs '(1 1 1 1))
(define (utterance-prior) (multinomial utterances (map (lambda (utterance-cost) (exp (- utterance-cost))) costs)))
(define slithery (list 0 1 2 3 4 5))
(define (slithery-prior category)
(case category
	(('horse) (multinomial slithery (list 0.666666666666667 0.111111111111111 0.0555555555555556 0.0555555555555556 0.0555555555555556 0.0555555555555556)))
	(('giraffe) (multinomial slithery (list 0.555555555555556 0.222222222222222 0.0555555555555556 0.0555555555555556 0.0555555555555556 0.0555555555555556)))
	(('snake) (multinomial slithery (list 0.0555555555555556 0.0555555555555556 0.0555555555555556 0.111111111111111 0.166666666666667 0.555555555555556)))
	(('man) (multinomial slithery (list 0.444444444444444 0.277777777777778 0.111111111111111 0.0555555555555556 0.0555555555555556 0.0555555555555556)))
))
(define tall (list 0 1 2 3 4 5))
(define (tall-prior category)
(case category
	(('horse) (multinomial tall (list 0.0384615384615385 0.192307692307692 0.269230769230769 0.0769230769230769 0.307692307692308 0.115384615384615)))
	(('giraffe) (multinomial tall (list 0.0384615384615385 0.0384615384615385 0.0384615384615385 0.115384615384615 0.0769230769230769 0.692307692307692)))
	(('snake) (multinomial tall (list 0.615384615384615 0.230769230769231 0.0384615384615385 0.0384615384615385 0.0384615384615385 0.0384615384615385)))
	(('man) (multinomial tall (list 0.115384615384615 0.192307692307692 0.269230769230769 0.307692307692308 0.0769230769230769 0.0384615384615385)))
))
(define strong (list 0 1 2 3 4 5))
(define (strong-prior category)
(case category
	(('horse) (multinomial strong (list 0.0952380952380952 0.0952380952380952 0.238095238095238 0.19047619047619 0.238095238095238 0.142857142857143)))
	(('giraffe) (multinomial strong (list 0.0952380952380952 0.285714285714286 0.238095238095238 0.0476190476190476 0.285714285714286 0.0476190476190476)))
	(('snake) (multinomial strong (list 0.380952380952381 0.285714285714286 0.0952380952380952 0.0952380952380952 0.0952380952380952 0.0476190476190476)))
	(('man) (multinomial strong (list 0.142857142857143 0.19047619047619 0.238095238095238 0.19047619047619 0.142857142857143 0.0952380952380952)))
))
(define long (list 0 1 2 3 4 5))
(define (long-prior category)
(case category
	(('horse) (multinomial long (list 0.25 0.2 0.15 0.2 0.15 0.05)))
	(('giraffe) (multinomial long (list 0.05 0.05 0.1 0.2 0.35 0.25)))
	(('snake) (multinomial long (list 0.15 0.05 0.2 0.2 0.15 0.25)))
	(('man) (multinomial long (list 0.35 0.1 0.35 0.05 0.1 0.05)))
))
(define fast (list 0 1 2 3 4 5))
(define (fast-prior category)
(case category
	(('horse) (multinomial fast (list 0.0526315789473684 0.105263157894737 0.210526315789474 0.210526315789474 0.263157894736842 0.157894736842105)))
	(('giraffe) (multinomial fast (list 0.157894736842105 0.263157894736842 0.368421052631579 0.105263157894737 0.0526315789473684 0.0526315789473684)))
	(('snake) (multinomial fast (list 0.157894736842105 0.368421052631579 0.157894736842105 0.157894736842105 0.105263157894737 0.0526315789473684)))
	(('man) (multinomial fast (list 0.105263157894737 0.263157894736842 0.157894736842105 0.157894736842105 0.263157894736842 0.0526315789473684)))
))
(define goals (list 'category? 'slithery? 'tall? 'strong? 'long? 'fast?))
(define (goal-prior) (uniform-draw goals))
(define lit-listener (mem (lambda (utterance goal)
(enumeration-query
(define category utterance)
(define feature
	(case goal
		(('category?) category)
		(('slithery?) (slithery-prior category))
		(('tall?) (tall-prior category))
		(('strong?) (strong-prior category))
		(('long?) (long-prior category))
		(('fast?) (fast-prior category))
))
feature
#t))))
(define speaker (mem (lambda 
(category slithery tall strong long fast goal)
(enumeration-query
(define utterance (utterance-prior))
(define dimension
	(case goal
		(('category?) category)
		(('slithery?) slithery)
		(('tall?) tall)
		(('strong?) strong)
		(('long?) long)
		(('fast?) fast)
))
utterance
(equal? (apply multinomial (lit-listener utterance goal)) dimension)))))
(define listener (mem (lambda (utterance)
(enumeration-query
(define category (categories-prior))
(define slithery (slithery-prior category))
(define tall (tall-prior category))
(define strong (strong-prior category))
(define long (long-prior category))
(define fast (fast-prior category))
(define speaker-goal (goal-prior))
(list category slithery tall strong long fast)
(equal? utterance (apply multinomial (raise-to-power (speaker category slithery tall strong long fast speaker-goal) alpha)))))))
(define (raise-to-power speaker-dist alpha) (list (first speaker-dist) (map (lambda (x) (pow x alpha)) (second speaker-dist))))
(define alpha 1)
(define interpretation (listener 'giraffe))
(write-csv (map flatten (zip (first interpretation) (second interpretation))) '/Users/justinek/Dropbox/Work/Grad_school/Research/Metaphor/metaphors/Model/SeedingModel/CoreAnimalsOutput/giraffe_6_1.csv)