(define categories (list 'turtle 'sloth 'horse 'bear 'gorilla 'elephant 'man))
(define (categories-prior) (multinomial categories '(0.00166666666667 0.00166666666667 0.00166666666667 0.00166666666667 0.00166666666667 0.00166666666667 0.99)))
(define utterances categories)
(define costs '(1 1 1 1 1 1 1))
(define (utterance-prior) (multinomial utterances (map (lambda (utterance-cost) (exp (- utterance-cost))) costs)))
(define hairy (list 0 1 2 3 4 5))
(define (hairy-prior category)
(case category
	(('turtle) (multinomial hairy (list 0.631578947368421 0.105263157894737 0.0526315789473684 0.105263157894737 0.0526315789473684 0.0526315789473684)))
	(('sloth) (multinomial hairy (list 0.210526315789474 0.157894736842105 0.0526315789473684 0.105263157894737 0.210526315789474 0.263157894736842)))
	(('horse) (multinomial hairy (list 0.105263157894737 0.0526315789473684 0.157894736842105 0.210526315789474 0.263157894736842 0.210526315789474)))
	(('bear) (multinomial hairy (list 0.0526315789473684 0.105263157894737 0.0526315789473684 0.105263157894737 0.315789473684211 0.368421052631579)))
	(('gorilla) (multinomial hairy (list 0.105263157894737 0.0526315789473684 0.105263157894737 0.210526315789474 0.210526315789474 0.315789473684211)))
	(('elephant) (multinomial hairy (list 0.421052631578947 0.210526315789474 0.105263157894737 0.105263157894737 0.105263157894737 0.0526315789473684)))
	(('man) (multinomial hairy (list 0.157894736842105 0.157894736842105 0.263157894736842 0.210526315789474 0.105263157894737 0.105263157894737)))
))
(define lazy (list 0 1 2 3 4 5))
(define (lazy-prior category)
(case category
	(('turtle) (multinomial lazy (list 0.173913043478261 0.130434782608696 0.130434782608696 0.0869565217391304 0.260869565217391 0.217391304347826)))
	(('sloth) (multinomial lazy (list 0.130434782608696 0.0434782608695652 0.0434782608695652 0.130434782608696 0.130434782608696 0.521739130434783)))
	(('horse) (multinomial lazy (list 0.347826086956522 0.304347826086957 0.0869565217391304 0.130434782608696 0.0869565217391304 0.0434782608695652)))
	(('bear) (multinomial lazy (list 0.173913043478261 0.130434782608696 0.130434782608696 0.173913043478261 0.217391304347826 0.173913043478261)))
	(('gorilla) (multinomial lazy (list 0.173913043478261 0.173913043478261 0.173913043478261 0.304347826086957 0.0869565217391304 0.0869565217391304)))
	(('elephant) (multinomial lazy (list 0.217391304347826 0.173913043478261 0.130434782608696 0.260869565217391 0.0869565217391304 0.130434782608696)))
	(('man) (multinomial lazy (list 0.173913043478261 0.130434782608696 0.0869565217391304 0.173913043478261 0.304347826086957 0.130434782608696)))
))
(define slow (list 0 1 2 3 4 5))
(define (slow-prior category)
(case category
	(('turtle) (multinomial slow (list 0.0454545454545455 0.0909090909090909 0.0454545454545455 0.0454545454545455 0.136363636363636 0.636363636363636)))
	(('sloth) (multinomial slow (list 0.0454545454545455 0.0454545454545455 0.0454545454545455 0.0909090909090909 0.136363636363636 0.636363636363636)))
	(('horse) (multinomial slow (list 0.409090909090909 0.227272727272727 0.136363636363636 0.0909090909090909 0.0909090909090909 0.0454545454545455)))
	(('bear) (multinomial slow (list 0.181818181818182 0.136363636363636 0.454545454545455 0.136363636363636 0.0454545454545455 0.0454545454545455)))
	(('gorilla) (multinomial slow (list 0.136363636363636 0.136363636363636 0.454545454545455 0.0909090909090909 0.136363636363636 0.0454545454545455)))
	(('elephant) (multinomial slow (list 0.0454545454545455 0.0454545454545455 0.227272727272727 0.181818181818182 0.272727272727273 0.227272727272727)))
	(('man) (multinomial slow (list 0.181818181818182 0.227272727272727 0.227272727272727 0.136363636363636 0.0909090909090909 0.136363636363636)))
))
(define big (list 0 1 2 3 4 5))
(define (big-prior category)
(case category
	(('turtle) (multinomial big (list 0.529411764705882 0.117647058823529 0.117647058823529 0.0588235294117647 0.0588235294117647 0.117647058823529)))
	(('sloth) (multinomial big (list 0.470588235294118 0.235294117647059 0.117647058823529 0.0588235294117647 0.0588235294117647 0.0588235294117647)))
	(('horse) (multinomial big (list 0.0588235294117647 0.0588235294117647 0.294117647058824 0.352941176470588 0.176470588235294 0.0588235294117647)))
	(('bear) (multinomial big (list 0.0588235294117647 0.0588235294117647 0.176470588235294 0.235294117647059 0.352941176470588 0.117647058823529)))
	(('gorilla) (multinomial big (list 0.0588235294117647 0.0588235294117647 0.294117647058824 0.235294117647059 0.235294117647059 0.117647058823529)))
	(('elephant) (multinomial big (list 0.0588235294117647 0.0588235294117647 0.0588235294117647 0.0588235294117647 0.352941176470588 0.411764705882353)))
	(('man) (multinomial big (list 0.117647058823529 0.176470588235294 0.470588235294118 0.117647058823529 0.0588235294117647 0.0588235294117647)))
))
(define hard (list 0 1 2 3 4 5))
(define (hard-prior category)
(case category
	(('turtle) (multinomial hard (list 0.0416666666666667 0.125 0.0833333333333333 0.0833333333333333 0.208333333333333 0.458333333333333)))
	(('sloth) (multinomial hard (list 0.5 0.25 0.0416666666666667 0.0416666666666667 0.125 0.0416666666666667)))
	(('horse) (multinomial hard (list 0.333333333333333 0.208333333333333 0.208333333333333 0.0833333333333333 0.0833333333333333 0.0833333333333333)))
	(('bear) (multinomial hard (list 0.25 0.208333333333333 0.25 0.0416666666666667 0.208333333333333 0.0416666666666667)))
	(('gorilla) (multinomial hard (list 0.375 0.208333333333333 0.166666666666667 0.0416666666666667 0.125 0.0833333333333333)))
	(('elephant) (multinomial hard (list 0.208333333333333 0.125 0.0833333333333333 0.25 0.25 0.0833333333333333)))
	(('man) (multinomial hard (list 0.333333333333333 0.208333333333333 0.208333333333333 0.125 0.0416666666666667 0.0833333333333333)))
))
(define fast (list 0 1 2 3 4 5))
(define (fast-prior category)
(case category
	(('turtle) (multinomial fast (list 0.631578947368421 0.157894736842105 0.0526315789473684 0.0526315789473684 0.0526315789473684 0.0526315789473684)))
	(('sloth) (multinomial fast (list 0.631578947368421 0.157894736842105 0.0526315789473684 0.0526315789473684 0.0526315789473684 0.0526315789473684)))
	(('horse) (multinomial fast (list 0.0526315789473684 0.105263157894737 0.210526315789474 0.210526315789474 0.263157894736842 0.157894736842105)))
	(('bear) (multinomial fast (list 0.105263157894737 0.210526315789474 0.315789473684211 0.157894736842105 0.157894736842105 0.0526315789473684)))
	(('gorilla) (multinomial fast (list 0.157894736842105 0.210526315789474 0.315789473684211 0.157894736842105 0.105263157894737 0.0526315789473684)))
	(('elephant) (multinomial fast (list 0.315789473684211 0.210526315789474 0.157894736842105 0.157894736842105 0.105263157894737 0.0526315789473684)))
	(('man) (multinomial fast (list 0.105263157894737 0.263157894736842 0.157894736842105 0.157894736842105 0.263157894736842 0.0526315789473684)))
))
(define strong (list 0 1 2 3 4 5))
(define (strong-prior category)
(case category
	(('turtle) (multinomial strong (list 0.523809523809524 0.238095238095238 0.0476190476190476 0.0476190476190476 0.0952380952380952 0.0476190476190476)))
	(('sloth) (multinomial strong (list 0.571428571428571 0.142857142857143 0.142857142857143 0.0476190476190476 0.0476190476190476 0.0476190476190476)))
	(('horse) (multinomial strong (list 0.0952380952380952 0.0952380952380952 0.238095238095238 0.19047619047619 0.238095238095238 0.142857142857143)))
	(('bear) (multinomial strong (list 0.0476190476190476 0.0476190476190476 0.142857142857143 0.142857142857143 0.476190476190476 0.142857142857143)))
	(('gorilla) (multinomial strong (list 0.0476190476190476 0.0476190476190476 0.142857142857143 0.285714285714286 0.142857142857143 0.333333333333333)))
	(('elephant) (multinomial strong (list 0.0952380952380952 0.0476190476190476 0.0952380952380952 0.142857142857143 0.0476190476190476 0.571428571428571)))
	(('man) (multinomial strong (list 0.142857142857143 0.19047619047619 0.238095238095238 0.19047619047619 0.142857142857143 0.0952380952380952)))
))
(define goals (list 'category? 'hairy? 'lazy? 'slow? 'big? 'hard? 'fast? 'strong?))
(define (goal-prior) (uniform-draw goals))
(define lit-listener (mem (lambda (utterance goal)
(enumeration-query
(define category utterance)
(define feature
	(case goal
		(('category?) category)
		(('hairy?) (hairy-prior category))
		(('lazy?) (lazy-prior category))
		(('slow?) (slow-prior category))
		(('big?) (big-prior category))
		(('hard?) (hard-prior category))
		(('fast?) (fast-prior category))
		(('strong?) (strong-prior category))
))
feature
#t))))
(define speaker (mem (lambda 
(category hairy lazy slow big hard fast strong goal)
(enumeration-query
(define utterance (utterance-prior))
(define dimension
	(case goal
		(('category?) category)
		(('hairy?) hairy)
		(('lazy?) lazy)
		(('slow?) slow)
		(('big?) big)
		(('hard?) hard)
		(('fast?) fast)
		(('strong?) strong)
))
utterance
(equal? (apply multinomial (lit-listener utterance goal)) dimension)))))
(define listener (mem (lambda (utterance)
(enumeration-query
(define category (categories-prior))
(define hairy (hairy-prior category))
(define lazy (lazy-prior category))
(define slow (slow-prior category))
(define big (big-prior category))
(define hard (hard-prior category))
(define fast (fast-prior category))
(define strong (strong-prior category))
(define speaker-goal (goal-prior))
(list category hairy lazy slow big hard fast strong)
(equal? utterance (apply multinomial (raise-to-power (speaker category hairy lazy slow big hard fast strong speaker-goal) alpha)))))))
(define (raise-to-power speaker-dist alpha) (list (first speaker-dist) (map (lambda (x) (pow x alpha)) (second speaker-dist))))
(define alpha 1)
(define interpretation (listener 'turtle))
(write-csv (map flatten (zip (first interpretation) (second interpretation))) '/Users/justinek/Dropbox/Work/Grad_school/Research/Metaphor/metaphors/Model/SeedingModel/CoreAnimalsOutput/turtle_6_1.csv)