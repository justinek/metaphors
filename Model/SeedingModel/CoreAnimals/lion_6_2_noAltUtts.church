(define categories (list 'man 'lion))
(define (categories-prior) (multinomial categories '(0.99 0.01)))
(define utterances categories)
(define costs '(1 1))
(define (utterance-prior) (multinomial utterances (map (lambda (utterance-cost) (exp (- utterance-cost))) costs)))
(define fierce (list 0 1 2 3 4 5))
(define (fierce-prior category)
(case category
	(('man) (multinomial fierce (list 0.105263157894737 0.157894736842105 0.210526315789474 0.157894736842105 0.210526315789474 0.157894736842105)))
	(('lion) (multinomial fierce (list 0.0526315789473684 0.0526315789473684 0.105263157894737 0.105263157894737 0.157894736842105 0.526315789473684)))
))
(define strong (list 0 1 2 3 4 5))
(define (strong-prior category)
(case category
	(('man) (multinomial strong (list 0.142857142857143 0.19047619047619 0.238095238095238 0.19047619047619 0.142857142857143 0.0952380952380952)))
	(('lion) (multinomial strong (list 0.0476190476190476 0.142857142857143 0.0952380952380952 0.285714285714286 0.19047619047619 0.238095238095238)))
))
(define goals (list 'category? 'fierce? 'strong?))
(define (goal-prior) (uniform-draw goals))
(define lit-listener (mem (lambda (utterance goal)
(enumeration-query
(define category utterance)
(define feature
	(case goal
		(('category?) category)
		(('fierce?) (fierce-prior category))
		(('strong?) (strong-prior category))
))
feature
#t))))
(define speaker (mem (lambda 
(category fierce strong goal)
(enumeration-query
(define utterance (utterance-prior))
(define dimension
	(case goal
		(('category?) category)
		(('fierce?) fierce)
		(('strong?) strong)
))
utterance
(equal? (apply multinomial (lit-listener utterance goal)) dimension)))))
(define listener (mem (lambda (utterance)
(enumeration-query
(define category (categories-prior))
(define fierce (fierce-prior category))
(define strong (strong-prior category))
(define speaker-goal (goal-prior))
(list category fierce strong)
(equal? utterance (apply multinomial (raise-to-power (speaker category fierce strong speaker-goal) alpha)))))))
(define (raise-to-power speaker-dist alpha) (list (first speaker-dist) (map (lambda (x) (pow x alpha)) (second speaker-dist))))
(define alpha 2)
(define interpretation (listener 'lion))
(write-csv (append (list (list 'category 'fierce 'strong 'prob)) (map flatten (zip (first interpretation) (second interpretation)))) '/Users/justinek/Dropbox/Work/Grad_school/Research/Metaphor/metaphors/Model/SeedingModel/CoreAnimalsOutput/lion_6_2_noAltUtts.csv)