(define categories (list 'man 'giraffe))
(define (categories-prior) (multinomial categories '(0.99 0.01)))
(define utterances categories)
(define costs '(1 1))
(define (utterance-prior) (multinomial utterances (map (lambda (utterance-cost) (exp (- utterance-cost))) costs)))
(define tall (list 0 1 2))
(define (tall-prior category)
(case category
	(('man) (multinomial tall (list 0.304347826086957 0.608695652173913 0.0869565217391304)))
	(('giraffe) (multinomial tall (list 0.0434782608695652 0.130434782608696 0.826086956521739)))
))
(define long (list 0 1 2))
(define (long-prior category)
(case category
	(('man) (multinomial long (list 0.470588235294118 0.411764705882353 0.117647058823529)))
	(('giraffe) (multinomial long (list 0.0588235294117647 0.294117647058824 0.647058823529412)))
))
(define goals (list 'category? 'tall? 'long?))
(define (goal-prior) (uniform-draw goals))
(define lit-listener (mem (lambda (utterance goal)
(enumeration-query
(define category utterance)
(define feature
	(case goal
		(('category?) category)
		(('tall?) (tall-prior category))
		(('long?) (long-prior category))
))
feature
#t))))
(define speaker (mem (lambda 
(category tall long goal)
(enumeration-query
(define utterance (utterance-prior))
(define dimension
	(case goal
		(('category?) category)
		(('tall?) tall)
		(('long?) long)
))
utterance
(equal? (apply multinomial (lit-listener utterance goal)) dimension)))))
(define listener (mem (lambda (utterance)
(enumeration-query
(define category (categories-prior))
(define tall (tall-prior category))
(define long (long-prior category))
(define speaker-goal (goal-prior))
(list category tall long)
(equal? utterance (apply multinomial (raise-to-power (speaker category tall long speaker-goal) alpha)))))))
(define (raise-to-power speaker-dist alpha) (list (first speaker-dist) (map (lambda (x) (pow x alpha)) (second speaker-dist))))
(define alpha 3)
(define interpretation (listener 'giraffe))
(write-csv (append (list (list 'category 'tall 'long 'prob)) (map flatten (zip (first interpretation) (second interpretation)))) '/Users/justinek/Dropbox/Work/Grad_school/Research/Metaphor/metaphors/Model/SeedingModel/CoreAnimalsOutput/giraffe_3_3_noAltUtts.csv)