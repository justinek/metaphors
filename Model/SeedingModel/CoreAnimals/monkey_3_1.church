(define categories (list 'hyena 'dog 'dolphin 'monkey 'cat 'man))
(define (categories-prior) (multinomial categories '(0.002 0.002 0.002 0.002 0.002 0.99)))
(define utterances categories)
(define costs '(1 1 1 1 1 1))
(define (utterance-prior) (multinomial utterances (map (lambda (utterance-cost) (exp (- utterance-cost))) costs)))
(define funny (list 0 1 2))
(define (funny-prior category)
(case category
	(('hyena) (multinomial funny (list 0.411764705882353 0.352941176470588 0.235294117647059)))
	(('dog) (multinomial funny (list 0.117647058823529 0.411764705882353 0.470588235294118)))
	(('dolphin) (multinomial funny (list 0.352941176470588 0.235294117647059 0.411764705882353)))
	(('monkey) (multinomial funny (list 0.235294117647059 0.352941176470588 0.411764705882353)))
	(('cat) (multinomial funny (list 0.235294117647059 0.352941176470588 0.411764705882353)))
	(('man) (multinomial funny (list 0.117647058823529 0.352941176470588 0.529411764705882)))
))
(define lazy (list 0 1 2))
(define (lazy-prior category)
(case category
	(('hyena) (multinomial lazy (list 0.4 0.5 0.1)))
	(('dog) (multinomial lazy (list 0.35 0.35 0.3)))
	(('dolphin) (multinomial lazy (list 0.55 0.4 0.05)))
	(('monkey) (multinomial lazy (list 0.4 0.45 0.15)))
	(('cat) (multinomial lazy (list 0.2 0.25 0.55)))
	(('man) (multinomial lazy (list 0.3 0.25 0.45)))
))
(define cute (list 0 1 2))
(define (cute-prior category)
(case category
	(('hyena) (multinomial cute (list 0.7 0.2 0.1)))
	(('dog) (multinomial cute (list 0.1 0.2 0.7)))
	(('dolphin) (multinomial cute (list 0.2 0.25 0.55)))
	(('monkey) (multinomial cute (list 0.25 0.45 0.3)))
	(('cat) (multinomial cute (list 0.05 0.3 0.65)))
	(('man) (multinomial cute (list 0.3 0.4 0.3)))
))
(define loyal (list 0 1 2))
(define (loyal-prior category)
(case category
	(('hyena) (multinomial loyal (list 0.733333333333333 0.0666666666666667 0.2)))
	(('dog) (multinomial loyal (list 0.133333333333333 0.2 0.666666666666667)))
	(('dolphin) (multinomial loyal (list 0.4 0.466666666666667 0.133333333333333)))
	(('monkey) (multinomial loyal (list 0.4 0.4 0.2)))
	(('cat) (multinomial loyal (list 0.2 0.466666666666667 0.333333333333333)))
	(('man) (multinomial loyal (list 0.0666666666666667 0.4 0.533333333333333)))
))
(define loud (list 0 1 2))
(define (loud-prior category)
(case category
	(('hyena) (multinomial loud (list 0.421052631578947 0.421052631578947 0.157894736842105)))
	(('dog) (multinomial loud (list 0.263157894736842 0.421052631578947 0.315789473684211)))
	(('dolphin) (multinomial loud (list 0.421052631578947 0.421052631578947 0.157894736842105)))
	(('monkey) (multinomial loud (list 0.210526315789474 0.684210526315789 0.105263157894737)))
	(('cat) (multinomial loud (list 0.736842105263158 0.157894736842105 0.105263157894737)))
	(('man) (multinomial loud (list 0.105263157894737 0.526315789473684 0.368421052631579)))
))
(define friendly (list 0 1 2))
(define (friendly-prior category)
(case category
	(('hyena) (multinomial friendly (list 0.764705882352941 0.176470588235294 0.0588235294117647)))
	(('dog) (multinomial friendly (list 0.0588235294117647 0.117647058823529 0.823529411764706)))
	(('dolphin) (multinomial friendly (list 0.0588235294117647 0.294117647058824 0.647058823529412)))
	(('monkey) (multinomial friendly (list 0.294117647058824 0.529411764705882 0.176470588235294)))
	(('cat) (multinomial friendly (list 0.117647058823529 0.411764705882353 0.470588235294118)))
	(('man) (multinomial friendly (list 0.176470588235294 0.294117647058824 0.529411764705882)))
))
(define smart (list 0 1 2))
(define (smart-prior category)
(case category
	(('hyena) (multinomial smart (list 0.19047619047619 0.714285714285714 0.0952380952380952)))
	(('dog) (multinomial smart (list 0.19047619047619 0.380952380952381 0.428571428571429)))
	(('dolphin) (multinomial smart (list 0.0952380952380952 0.19047619047619 0.714285714285714)))
	(('monkey) (multinomial smart (list 0.0476190476190476 0.476190476190476 0.476190476190476)))
	(('cat) (multinomial smart (list 0.19047619047619 0.380952380952381 0.428571428571429)))
	(('man) (multinomial smart (list 0.0476190476190476 0.19047619047619 0.761904761904762)))
))
(define happy (list 0 1 2))
(define (happy-prior category)
(case category
	(('hyena) (multinomial happy (list 0.304347826086957 0.391304347826087 0.304347826086957)))
	(('dog) (multinomial happy (list 0.0434782608695652 0.173913043478261 0.782608695652174)))
	(('dolphin) (multinomial happy (list 0.0869565217391304 0.217391304347826 0.695652173913043)))
	(('monkey) (multinomial happy (list 0.0869565217391304 0.434782608695652 0.478260869565217)))
	(('cat) (multinomial happy (list 0.130434782608696 0.304347826086957 0.565217391304348)))
	(('man) (multinomial happy (list 0.260869565217391 0.304347826086957 0.434782608695652)))
))
(define goals (list 'category? 'funny? 'lazy? 'cute? 'loyal? 'loud? 'friendly? 'smart? 'happy?))
(define (goal-prior) (uniform-draw goals))
(define lit-listener (mem (lambda (utterance goal)
(enumeration-query
(define category utterance)
(define feature
	(case goal
		(('category?) category)
		(('funny?) (funny-prior category))
		(('lazy?) (lazy-prior category))
		(('cute?) (cute-prior category))
		(('loyal?) (loyal-prior category))
		(('loud?) (loud-prior category))
		(('friendly?) (friendly-prior category))
		(('smart?) (smart-prior category))
		(('happy?) (happy-prior category))
))
feature
#t))))
(define speaker (mem (lambda 
(category funny lazy cute loyal loud friendly smart happy goal)
(enumeration-query
(define utterance (utterance-prior))
(define dimension
	(case goal
		(('category?) category)
		(('funny?) funny)
		(('lazy?) lazy)
		(('cute?) cute)
		(('loyal?) loyal)
		(('loud?) loud)
		(('friendly?) friendly)
		(('smart?) smart)
		(('happy?) happy)
))
utterance
(equal? (apply multinomial (lit-listener utterance goal)) dimension)))))
(define listener (mem (lambda (utterance)
(enumeration-query
(define category (categories-prior))
(define funny (funny-prior category))
(define lazy (lazy-prior category))
(define cute (cute-prior category))
(define loyal (loyal-prior category))
(define loud (loud-prior category))
(define friendly (friendly-prior category))
(define smart (smart-prior category))
(define happy (happy-prior category))
(define speaker-goal (goal-prior))
(list category funny lazy cute loyal loud friendly smart happy)
(equal? utterance (apply multinomial (raise-to-power (speaker category funny lazy cute loyal loud friendly smart happy speaker-goal) alpha)))))))
(define (raise-to-power speaker-dist alpha) (list (first speaker-dist) (map (lambda (x) (pow x alpha)) (second speaker-dist))))
(define alpha 1)
(define interpretation (listener 'monkey))
(write-csv (map flatten (zip (first interpretation) (second interpretation))) '/Users/justinek/Dropbox/Work/Grad_school/Research/Metaphor/metaphors/Model/SeedingModel/CoreAnimalsOutput/monkey_3_1.csv)