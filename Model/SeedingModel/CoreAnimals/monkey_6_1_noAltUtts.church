(define categories (list 'man 'monkey))
(define (categories-prior) (multinomial categories '(0.99 0.01)))
(define utterances categories)
(define costs '(1 1))
(define (utterance-prior) (multinomial utterances (map (lambda (utterance-cost) (exp (- utterance-cost))) costs)))
(define funny (list 0 1 2 3 4 5))
(define (funny-prior category)
(case category
	(('man) (multinomial funny (list 0.1 0.05 0.15 0.2 0.2 0.3)))
	(('monkey) (multinomial funny (list 0.2 0.05 0.2 0.15 0.1 0.3)))
))
(define smart (list 0 1 2 3 4 5))
(define (smart-prior category)
(case category
	(('man) (multinomial smart (list 0.0416666666666667 0.0416666666666667 0.0833333333333333 0.125 0.0833333333333333 0.625)))
	(('monkey) (multinomial smart (list 0.0416666666666667 0.0416666666666667 0.166666666666667 0.291666666666667 0.25 0.208333333333333)))
))
(define goals (list 'category? 'funny? 'smart?))
(define (goal-prior) (uniform-draw goals))
(define lit-listener (mem (lambda (utterance goal)
(enumeration-query
(define category utterance)
(define feature
	(case goal
		(('category?) category)
		(('funny?) (funny-prior category))
		(('smart?) (smart-prior category))
))
feature
#t))))
(define speaker (mem (lambda 
(category funny smart goal)
(enumeration-query
(define utterance (utterance-prior))
(define dimension
	(case goal
		(('category?) category)
		(('funny?) funny)
		(('smart?) smart)
))
utterance
(equal? (apply multinomial (lit-listener utterance goal)) dimension)))))
(define listener (mem (lambda (utterance)
(enumeration-query
(define category (categories-prior))
(define funny (funny-prior category))
(define smart (smart-prior category))
(define speaker-goal (goal-prior))
(list category funny smart)
(equal? utterance (apply multinomial (raise-to-power (speaker category funny smart speaker-goal) alpha)))))))
(define (raise-to-power speaker-dist alpha) (list (first speaker-dist) (map (lambda (x) (pow x alpha)) (second speaker-dist))))
(define alpha 1)
(define interpretation (listener 'monkey))
(write-csv (append (list (list 'category 'funny 'smart 'prob)) (map flatten (zip (first interpretation) (second interpretation)))) '/Users/justinek/Dropbox/Work/Grad_school/Research/Metaphor/metaphors/Model/SeedingModel/CoreAnimalsOutput/monkey_6_1_noAltUtts.csv)