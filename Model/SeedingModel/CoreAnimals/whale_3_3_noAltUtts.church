(define categories (list 'man 'whale))
(define (categories-prior) (multinomial categories '(0.99 0.01)))
(define utterances categories)
(define costs '(1 1))
(define (utterance-prior) (multinomial utterances (map (lambda (utterance-cost) (exp (- utterance-cost))) costs)))
(define big (list 0 1 2))
(define (big-prior category)
(case category
	(('man) (multinomial big (list 0.285714285714286 0.642857142857143 0.0714285714285714)))
	(('whale) (multinomial big (list 0.0714285714285714 0.142857142857143 0.785714285714286)))
))
(define majestic (list 0 1 2))
(define (majestic-prior category)
(case category
	(('man) (multinomial majestic (list 0.411764705882353 0.294117647058824 0.294117647058824)))
	(('whale) (multinomial majestic (list 0.117647058823529 0.411764705882353 0.470588235294118)))
))
(define goals (list 'category? 'big? 'majestic?))
(define (goal-prior) (uniform-draw goals))
(define lit-listener (mem (lambda (utterance goal)
(enumeration-query
(define category utterance)
(define feature
	(case goal
		(('category?) category)
		(('big?) (big-prior category))
		(('majestic?) (majestic-prior category))
))
feature
#t))))
(define speaker (mem (lambda 
(category big majestic goal)
(enumeration-query
(define utterance (utterance-prior))
(define dimension
	(case goal
		(('category?) category)
		(('big?) big)
		(('majestic?) majestic)
))
utterance
(equal? (apply multinomial (lit-listener utterance goal)) dimension)))))
(define listener (mem (lambda (utterance)
(enumeration-query
(define category (categories-prior))
(define big (big-prior category))
(define majestic (majestic-prior category))
(define speaker-goal (goal-prior))
(list category big majestic)
(equal? utterance (apply multinomial (raise-to-power (speaker category big majestic speaker-goal) alpha)))))))
(define (raise-to-power speaker-dist alpha) (list (first speaker-dist) (map (lambda (x) (pow x alpha)) (second speaker-dist))))
(define alpha 3)
(define interpretation (listener 'whale))
(write-csv (append (list (list 'category 'big 'majestic 'prob)) (map flatten (zip (first interpretation) (second interpretation)))) '/Users/justinek/Dropbox/Work/Grad_school/Research/Metaphor/metaphors/Model/SeedingModel/CoreAnimalsOutput/whale_3_3_noAltUtts.csv)