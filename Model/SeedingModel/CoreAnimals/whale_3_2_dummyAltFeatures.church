(define categories (list 'eagle 'whale 'horse 'lion 'elephant 'man))
(define (categories-prior) (multinomial categories '(0.002 0.002 0.002 0.002 0.002 0.99)))
(define utterances categories)
(define costs '(1 1 1 1 1 1))
(define (utterance-prior) (multinomial utterances (map (lambda (utterance-cost) (exp (- utterance-cost))) costs)))
(define hard (list 0 1 2))
(define (hard-prior category)
(case category
	(('eagle) (multinomial hard (list 1 1 1)))
	(('whale) (multinomial hard (list 1 1 1)))
	(('horse) (multinomial hard (list 1 1 1)))
	(('lion) (multinomial hard (list 1 1 1)))
	(('elephant) (multinomial hard (list 1 1 1)))
	(('man) (multinomial hard (list 1 1 1)))
))
(define big (list 0 1 2))
(define (big-prior category)
(case category
	(('eagle) (multinomial big (list 0.642857142857143 0.285714285714286 0.0714285714285714)))
	(('whale) (multinomial big (list 0.0714285714285714 0.142857142857143 0.785714285714286)))
	(('horse) (multinomial big (list 0.0714285714285714 0.714285714285714 0.214285714285714)))
	(('lion) (multinomial big (list 0.285714285714286 0.428571428571429 0.285714285714286)))
	(('elephant) (multinomial big (list 0.0714285714285714 0.0714285714285714 0.857142857142857)))
	(('man) (multinomial big (list 0.285714285714286 0.642857142857143 0.0714285714285714)))
))
(define proud (list 0 1 2))
(define (proud-prior category)
(case category
	(('eagle) (multinomial proud (list 1 1 1)))
	(('whale) (multinomial proud (list 1 1 1)))
	(('horse) (multinomial proud (list 1 1 1)))
	(('lion) (multinomial proud (list 1 1 1)))
	(('elephant) (multinomial proud (list 1 1 1)))
	(('man) (multinomial proud (list 1 1 1)))
))
(define fast (list 0 1 2))
(define (fast-prior category)
(case category
	(('eagle) (multinomial fast (list 1 1 1)))
	(('whale) (multinomial fast (list 1 1 1)))
	(('horse) (multinomial fast (list 1 1 1)))
	(('lion) (multinomial fast (list 1 1 1)))
	(('elephant) (multinomial fast (list 1 1 1)))
	(('man) (multinomial fast (list 1 1 1)))
))
(define fierce (list 0 1 2))
(define (fierce-prior category)
(case category
	(('eagle) (multinomial fierce (list 1 1 1)))
	(('whale) (multinomial fierce (list 1 1 1)))
	(('horse) (multinomial fierce (list 1 1 1)))
	(('lion) (multinomial fierce (list 1 1 1)))
	(('elephant) (multinomial fierce (list 1 1 1)))
	(('man) (multinomial fierce (list 1 1 1)))
))
(define majestic (list 0 1 2))
(define (majestic-prior category)
(case category
	(('eagle) (multinomial majestic (list 0.176470588235294 0.352941176470588 0.470588235294118)))
	(('whale) (multinomial majestic (list 0.117647058823529 0.411764705882353 0.470588235294118)))
	(('horse) (multinomial majestic (list 0.117647058823529 0.411764705882353 0.470588235294118)))
	(('lion) (multinomial majestic (list 0.117647058823529 0.176470588235294 0.705882352941177)))
	(('elephant) (multinomial majestic (list 0.0588235294117647 0.294117647058824 0.647058823529412)))
	(('man) (multinomial majestic (list 0.411764705882353 0.294117647058824 0.294117647058824)))
))
(define strong (list 0 1 2))
(define (strong-prior category)
(case category
	(('eagle) (multinomial strong (list 1 1 1)))
	(('whale) (multinomial strong (list 1 1 1)))
	(('horse) (multinomial strong (list 1 1 1)))
	(('lion) (multinomial strong (list 1 1 1)))
	(('elephant) (multinomial strong (list 1 1 1)))
	(('man) (multinomial strong (list 1 1 1)))
))
(define goals (list 'category? 'hard? 'big? 'proud? 'fast? 'fierce? 'majestic? 'strong?))
(define (goal-prior) (uniform-draw goals))
(define lit-listener (mem (lambda (utterance goal)
(enumeration-query
(define category utterance)
(define feature
	(case goal
		(('category?) category)
		(('hard?) (hard-prior category))
		(('big?) (big-prior category))
		(('proud?) (proud-prior category))
		(('fast?) (fast-prior category))
		(('fierce?) (fierce-prior category))
		(('majestic?) (majestic-prior category))
		(('strong?) (strong-prior category))
))
feature
#t))))
(define speaker (mem (lambda 
(category hard big proud fast fierce majestic strong goal)
(enumeration-query
(define utterance (utterance-prior))
(define dimension
	(case goal
		(('category?) category)
		(('hard?) hard)
		(('big?) big)
		(('proud?) proud)
		(('fast?) fast)
		(('fierce?) fierce)
		(('majestic?) majestic)
		(('strong?) strong)
))
utterance
(equal? (apply multinomial (lit-listener utterance goal)) dimension)))))
(define listener (mem (lambda (utterance)
(enumeration-query
(define category (categories-prior))
(define hard (hard-prior category))
(define big (big-prior category))
(define proud (proud-prior category))
(define fast (fast-prior category))
(define fierce (fierce-prior category))
(define majestic (majestic-prior category))
(define strong (strong-prior category))
(define speaker-goal (goal-prior))
(list category hard big proud fast fierce majestic strong)
(equal? utterance (apply multinomial (raise-to-power (speaker category hard big proud fast fierce majestic strong speaker-goal) alpha)))))))
(define (raise-to-power speaker-dist alpha) (list (first speaker-dist) (map (lambda (x) (pow x alpha)) (second speaker-dist))))
(define alpha 2)
(define interpretation (listener 'whale))
(write-csv (append (list (list 'category 'hard 'big 'proud 'fast 'fierce 'majestic 'strong 'prob)) (map flatten (zip (first interpretation) (second interpretation)))) '/Users/justinek/Dropbox/Work/Grad_school/Research/Metaphor/metaphors/Model/SeedingModel/CoreAnimalsOutput/whale_3_2_dummyAltFeatures.csv)