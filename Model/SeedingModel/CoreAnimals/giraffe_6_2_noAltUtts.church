(define categories (list 'man 'giraffe))
(define (categories-prior) (multinomial categories '(0.99 0.01)))
(define utterances categories)
(define costs '(1 1))
(define (utterance-prior) (multinomial utterances (map (lambda (utterance-cost) (exp (- utterance-cost))) costs)))
(define tall (list 0 1 2 3 4 5))
(define (tall-prior category)
(case category
	(('man) (multinomial tall (list 0.115384615384615 0.192307692307692 0.269230769230769 0.307692307692308 0.0769230769230769 0.0384615384615385)))
	(('giraffe) (multinomial tall (list 0.0384615384615385 0.0384615384615385 0.0384615384615385 0.115384615384615 0.0769230769230769 0.692307692307692)))
))
(define long (list 0 1 2 3 4 5))
(define (long-prior category)
(case category
	(('man) (multinomial long (list 0.35 0.1 0.35 0.05 0.1 0.05)))
	(('giraffe) (multinomial long (list 0.05 0.05 0.1 0.2 0.35 0.25)))
))
(define goals (list 'category? 'tall? 'long?))
(define (goal-prior) (uniform-draw goals))
(define lit-listener (mem (lambda (utterance goal)
(enumeration-query
(define category utterance)
(define feature
	(case goal
		(('category?) category)
		(('tall?) (tall-prior category))
		(('long?) (long-prior category))
))
feature
#t))))
(define speaker (mem (lambda 
(category tall long goal)
(enumeration-query
(define utterance (utterance-prior))
(define dimension
	(case goal
		(('category?) category)
		(('tall?) tall)
		(('long?) long)
))
utterance
(equal? (apply multinomial (lit-listener utterance goal)) dimension)))))
(define listener (mem (lambda (utterance)
(enumeration-query
(define category (categories-prior))
(define tall (tall-prior category))
(define long (long-prior category))
(define speaker-goal (goal-prior))
(list category tall long)
(equal? utterance (apply multinomial (raise-to-power (speaker category tall long speaker-goal) alpha)))))))
(define (raise-to-power speaker-dist alpha) (list (first speaker-dist) (map (lambda (x) (pow x alpha)) (second speaker-dist))))
(define alpha 2)
(define interpretation (listener 'giraffe))
(write-csv (append (list (list 'category 'tall 'long 'prob)) (map flatten (zip (first interpretation) (second interpretation)))) '/Users/justinek/Dropbox/Work/Grad_school/Research/Metaphor/metaphors/Model/SeedingModel/CoreAnimalsOutput/giraffe_6_2_noAltUtts.csv)