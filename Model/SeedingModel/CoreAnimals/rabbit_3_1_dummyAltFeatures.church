(define categories (list 'jaguar 'dog 'cat 'rabbit 'kitten 'cheetah 'man))
(define (categories-prior) (multinomial categories '(0.00166666666667 0.00166666666667 0.00166666666667 0.00166666666667 0.00166666666667 0.00166666666667 0.99)))
(define utterances categories)
(define costs '(1 1 1 1 1 1 1))
(define (utterance-prior) (multinomial utterances (map (lambda (utterance-cost) (exp (- utterance-cost))) costs)))
(define cute (list 0 1 2))
(define (cute-prior category)
(case category
	(('jaguar) (multinomial cute (list 0.4 0.5 0.1)))
	(('dog) (multinomial cute (list 0.1 0.2 0.7)))
	(('cat) (multinomial cute (list 0.05 0.3 0.65)))
	(('rabbit) (multinomial cute (list 0.2 0.3 0.5)))
	(('kitten) (multinomial cute (list 0.05 0.2 0.75)))
	(('cheetah) (multinomial cute (list 0.5 0.35 0.15)))
	(('man) (multinomial cute (list 0.3 0.4 0.3)))
))
(define lazy (list 0 1 2))
(define (lazy-prior category)
(case category
	(('jaguar) (multinomial lazy (list 1 1 1)))
	(('dog) (multinomial lazy (list 1 1 1)))
	(('cat) (multinomial lazy (list 1 1 1)))
	(('rabbit) (multinomial lazy (list 1 1 1)))
	(('kitten) (multinomial lazy (list 1 1 1)))
	(('cheetah) (multinomial lazy (list 1 1 1)))
	(('man) (multinomial lazy (list 1 1 1)))
))
(define agile (list 0 1 2))
(define (agile-prior category)
(case category
	(('jaguar) (multinomial agile (list 1 1 1)))
	(('dog) (multinomial agile (list 1 1 1)))
	(('cat) (multinomial agile (list 1 1 1)))
	(('rabbit) (multinomial agile (list 1 1 1)))
	(('kitten) (multinomial agile (list 1 1 1)))
	(('cheetah) (multinomial agile (list 1 1 1)))
	(('man) (multinomial agile (list 1 1 1)))
))
(define fast (list 0 1 2))
(define (fast-prior category)
(case category
	(('jaguar) (multinomial fast (list 0.0625 0.375 0.5625)))
	(('dog) (multinomial fast (list 0.0625 0.6875 0.25)))
	(('cat) (multinomial fast (list 0.1875 0.625 0.1875)))
	(('rabbit) (multinomial fast (list 0.125 0.6875 0.1875)))
	(('kitten) (multinomial fast (list 0.4375 0.5 0.0625)))
	(('cheetah) (multinomial fast (list 0.0625 0.125 0.8125)))
	(('man) (multinomial fast (list 0.375 0.3125 0.3125)))
))
(define sleek (list 0 1 2))
(define (sleek-prior category)
(case category
	(('jaguar) (multinomial sleek (list 1 1 1)))
	(('dog) (multinomial sleek (list 1 1 1)))
	(('cat) (multinomial sleek (list 1 1 1)))
	(('rabbit) (multinomial sleek (list 1 1 1)))
	(('kitten) (multinomial sleek (list 1 1 1)))
	(('cheetah) (multinomial sleek (list 1 1 1)))
	(('man) (multinomial sleek (list 1 1 1)))
))
(define playful (list 0 1 2))
(define (playful-prior category)
(case category
	(('jaguar) (multinomial playful (list 1 1 1)))
	(('dog) (multinomial playful (list 1 1 1)))
	(('cat) (multinomial playful (list 1 1 1)))
	(('rabbit) (multinomial playful (list 1 1 1)))
	(('kitten) (multinomial playful (list 1 1 1)))
	(('cheetah) (multinomial playful (list 1 1 1)))
	(('man) (multinomial playful (list 1 1 1)))
))
(define loyal (list 0 1 2))
(define (loyal-prior category)
(case category
	(('jaguar) (multinomial loyal (list 1 1 1)))
	(('dog) (multinomial loyal (list 1 1 1)))
	(('cat) (multinomial loyal (list 1 1 1)))
	(('rabbit) (multinomial loyal (list 1 1 1)))
	(('kitten) (multinomial loyal (list 1 1 1)))
	(('cheetah) (multinomial loyal (list 1 1 1)))
	(('man) (multinomial loyal (list 1 1 1)))
))
(define friendly (list 0 1 2))
(define (friendly-prior category)
(case category
	(('jaguar) (multinomial friendly (list 1 1 1)))
	(('dog) (multinomial friendly (list 1 1 1)))
	(('cat) (multinomial friendly (list 1 1 1)))
	(('rabbit) (multinomial friendly (list 1 1 1)))
	(('kitten) (multinomial friendly (list 1 1 1)))
	(('cheetah) (multinomial friendly (list 1 1 1)))
	(('man) (multinomial friendly (list 1 1 1)))
))
(define goals (list 'category? 'cute? 'lazy? 'agile? 'fast? 'sleek? 'playful? 'loyal? 'friendly?))
(define (goal-prior) (uniform-draw goals))
(define lit-listener (mem (lambda (utterance goal)
(enumeration-query
(define category utterance)
(define feature
	(case goal
		(('category?) category)
		(('cute?) (cute-prior category))
		(('lazy?) (lazy-prior category))
		(('agile?) (agile-prior category))
		(('fast?) (fast-prior category))
		(('sleek?) (sleek-prior category))
		(('playful?) (playful-prior category))
		(('loyal?) (loyal-prior category))
		(('friendly?) (friendly-prior category))
))
feature
#t))))
(define speaker (mem (lambda 
(category cute lazy agile fast sleek playful loyal friendly goal)
(enumeration-query
(define utterance (utterance-prior))
(define dimension
	(case goal
		(('category?) category)
		(('cute?) cute)
		(('lazy?) lazy)
		(('agile?) agile)
		(('fast?) fast)
		(('sleek?) sleek)
		(('playful?) playful)
		(('loyal?) loyal)
		(('friendly?) friendly)
))
utterance
(equal? (apply multinomial (lit-listener utterance goal)) dimension)))))
(define listener (mem (lambda (utterance)
(enumeration-query
(define category (categories-prior))
(define cute (cute-prior category))
(define lazy (lazy-prior category))
(define agile (agile-prior category))
(define fast (fast-prior category))
(define sleek (sleek-prior category))
(define playful (playful-prior category))
(define loyal (loyal-prior category))
(define friendly (friendly-prior category))
(define speaker-goal (goal-prior))
(list category cute lazy agile fast sleek playful loyal friendly)
(equal? utterance (apply multinomial (raise-to-power (speaker category cute lazy agile fast sleek playful loyal friendly speaker-goal) alpha)))))))
(define (raise-to-power speaker-dist alpha) (list (first speaker-dist) (map (lambda (x) (pow x alpha)) (second speaker-dist))))
(define alpha 1)
(define interpretation (listener 'rabbit))
(write-csv (append (list (list 'category 'cute 'lazy 'agile 'fast 'sleek 'playful 'loyal 'friendly 'prob)) (map flatten (zip (first interpretation) (second interpretation)))) '/Users/justinek/Dropbox/Work/Grad_school/Research/Metaphor/metaphors/Model/SeedingModel/CoreAnimalsOutput/rabbit_3_1_dummyAltFeatures.csv)