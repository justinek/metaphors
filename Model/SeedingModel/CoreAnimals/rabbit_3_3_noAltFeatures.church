(define categories (list 'jaguar 'dog 'cat 'rabbit 'kitten 'cheetah 'man))
(define (categories-prior) (multinomial categories '(0.00166666666667 0.00166666666667 0.00166666666667 0.00166666666667 0.00166666666667 0.00166666666667 0.99)))
(define utterances categories)
(define costs '(1 1 1 1 1 1 1))
(define (utterance-prior) (multinomial utterances (map (lambda (utterance-cost) (exp (- utterance-cost))) costs)))
(define fast (list 0 1 2))
(define (fast-prior category)
(case category
	(('jaguar) (multinomial fast (list 0.0625 0.375 0.5625)))
	(('dog) (multinomial fast (list 0.0625 0.6875 0.25)))
	(('cat) (multinomial fast (list 0.1875 0.625 0.1875)))
	(('rabbit) (multinomial fast (list 0.125 0.6875 0.1875)))
	(('kitten) (multinomial fast (list 0.4375 0.5 0.0625)))
	(('cheetah) (multinomial fast (list 0.0625 0.125 0.8125)))
	(('man) (multinomial fast (list 0.375 0.3125 0.3125)))
))
(define cute (list 0 1 2))
(define (cute-prior category)
(case category
	(('jaguar) (multinomial cute (list 0.4 0.5 0.1)))
	(('dog) (multinomial cute (list 0.1 0.2 0.7)))
	(('cat) (multinomial cute (list 0.05 0.3 0.65)))
	(('rabbit) (multinomial cute (list 0.2 0.3 0.5)))
	(('kitten) (multinomial cute (list 0.05 0.2 0.75)))
	(('cheetah) (multinomial cute (list 0.5 0.35 0.15)))
	(('man) (multinomial cute (list 0.3 0.4 0.3)))
))
(define goals (list 'category? 'fast? 'cute?))
(define (goal-prior) (uniform-draw goals))
(define lit-listener (mem (lambda (utterance goal)
(enumeration-query
(define category utterance)
(define feature
	(case goal
		(('category?) category)
		(('fast?) (fast-prior category))
		(('cute?) (cute-prior category))
))
feature
#t))))
(define speaker (mem (lambda 
(category fast cute goal)
(enumeration-query
(define utterance (utterance-prior))
(define dimension
	(case goal
		(('category?) category)
		(('fast?) fast)
		(('cute?) cute)
))
utterance
(equal? (apply multinomial (lit-listener utterance goal)) dimension)))))
(define listener (mem (lambda (utterance)
(enumeration-query
(define category (categories-prior))
(define fast (fast-prior category))
(define cute (cute-prior category))
(define speaker-goal (goal-prior))
(list category fast cute)
(equal? utterance (apply multinomial (raise-to-power (speaker category fast cute speaker-goal) alpha)))))))
(define (raise-to-power speaker-dist alpha) (list (first speaker-dist) (map (lambda (x) (pow x alpha)) (second speaker-dist))))
(define alpha 3)
(define interpretation (listener 'rabbit))
(write-csv (append (list (list 'category 'fast 'cute 'prob)) (map flatten (zip (first interpretation) (second interpretation)))) '/Users/justinek/Dropbox/Work/Grad_school/Research/Metaphor/metaphors/Model/SeedingModel/CoreAnimalsOutput/rabbit_3_3_noAltFeatures.csv)