(define featureSet-prior (list (list '0.234440873 '0.079711195 '0.137772566 '0.072405522 '0.202368505 '0.079163718 '0.122984582 '0.071153038) (list '0.083753318 '0.112986245 '0.119248364 '0.146386289 '0.105936477 '0.133837752 '0.121904194 '0.175947361)))

;; This model will not run as the feature priors are not defined.
;; We will define the parameters separately and concatenate with this code.

;;(define (goal-prior) (uniform-draw goals))
(define (goal-prior) (multinomial goals '(0.5 0.5 0.5 0.25 0.25 0.25 0.125)))
;;(define (goal-prior) (multinomial goals '(0.9 0.5 0.5 0.45 0.45 0.25 0.225)))

(define categories (list 'animal 'person))

(define featureSets (list '(1 1 1) '(1 1 0) '(1 0 1) '(1 0 0) '(0 1 1) '(0 1 0) '(0 0 1) '(0 0 0)))

;; Define prior of john belonging to a category
(define (categories-prior) (multinomial categories '(0.0001 0.9999)))

;; All possible utterances someone could say ("John is a lion" "John is a man" "John is a blah")
(define utterances (list 'animal 'person))

;; Define utterance costs (set as uniform for now)
(define (utterance-prior) (multinomial utterances '(0.1 0.1)))

;; Parameters
(define depth 1)
(define hardness 1)

;; Define communicative goals as wanting to communicate something about John's category vs his fierceness
(define goals (list 'goal-feature1 'goal-feature2 'goal-feature3 'goal-feature1-feature2 'goal-feature1-feature3 'goal-feature2-feature3 'goal-feature1-feature2-feature3))

(define (sample-featureSet category prior)
  (if (equal? category 'animal)
    (multinomial featureSets (first featureSet-prior))
    (multinomial featureSets (second featureSet-prior))
    )
 )

(define (literal-interpretation utterance category)
  (equal? utterance category))


(define (goal-satisfied? goal listener-category-feature1-feature2-feature3 speaker-category speaker-feature1 speaker-feature2 speaker-feature3)
  (case goal
    (('goal-feature1) (equal? (second listener-category-feature1-feature2-feature3) speaker-feature1))
    (('goal-feature2) (equal? (third listener-category-feature1-feature2-feature3) speaker-feature2))
    (('goal-feature3) (equal? (fourth listener-category-feature1-feature2-feature3) speaker-feature3))
    (('goal-feature1-feature2) (and (equal? (second listener-category-feature1-feature2-feature3) speaker-feature1) 
      (equal? (third listener-category-feature1-feature2-feature3) speaker-feature2)))
    (('goal-feature1-feature3) (and (equal? (second listener-category-feature1-feature2-feature3) speaker-feature1) 
      (equal? (fourth listener-category-feature1-feature2-feature3) speaker-feature3)))
    (('goal-feature2-feature3) (and (equal? (third listener-category-feature1-feature2-feature3) speaker-feature2) 
      (equal? (fourth listener-category-feature1-feature2-feature3) speaker-feature3)))
    (('goal-feature1-feature2-feature3) (and (and (equal? (second listener-category-feature1-feature2-feature3) speaker-feature1) 
      (equal? (third listener-category-feature1-feature2-feature3) speaker-feature2)) (fourth listener-category-feature1-feature2-feature3) speaker-feature3))
   ))


;; The model is currently restricted to hardness=1
(define speaker
  (mem (lambda (category feature1 feature2 feature3 goal depth)
  (enumeration-query
   (define utterance (utterance-prior))
   utterance
    (goal-satisfied? goal (apply multinomial (listener utterance depth)) category feature1 feature2 feature3)
   ))))

(define listener
  (mem (lambda (utterance depth)
  (enumeration-query
   (define category (categories-prior))
   (define featureSet (sample-featureSet category featureSet-prior))
   (define feature1 (first featureSet))
   (define feature2 (second featureSet))
   (define feature3 (third featureSet))
   (define speaker-goal (goal-prior))
   
   ;(list category fierceness skinniness)
   (list category feature1 feature2 feature3)

   (if (equal? depth 0)
       (literal-interpretation utterance category)
       (equal? utterance
               (apply multinomial (speaker category feature1 feature2 feature3 speaker-goal (- depth 1)))))
   ))))

(define (sample-one utterance) 
  (listener utterance depth))

(sample-one 'animal)