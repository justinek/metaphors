head(f1.curated)
head(features0)
features1 <- data.frame(feature=unique(f1.curated$feature))
head(features1)
allFeatures_new <- join(allFeatures, features1, by="feature", type="full")
head(allFeatures_new)
View(allFeatures_new)
f1.curated <- read.csv("features1_curated.csv", col.names=c("animalID", "animal", "feature", "count"))
features1 <- data.frame(feature=unique(f1.curated$feature))
allFeatures_new <- join(allFeatures, features1, by="feature", type="full")
allFeatures_new <- allFeatures_new[with(allFeatures_new, order(featureID)),]
allFeatures_new$featureID <- seq(1, length(allFeatures_new$featureID))
head(allFeatures_new)
View(featureID)
View(allFeatures_new)
newFeatures <- subset(allFeatures_new, featureID > max(allFeatures$featureID))
write.csv(newFeatures, "Features/features1.csv", row.names=FALSE, quote=FALSE, col.names=FALSE)
write.csv(newFeatures, "Features/features1.csv", row.names=FALSE, quote=FALSE)
allFeatures <- allFeatures_new
write.csv(allFeatures, "Features/allFeatures_0_1.csv", row.names=FALSE, quote=FALSE)
f1.curated <- read.csv("features1_curated.csv", col.names=c("animalID", "animal", "feature", "count"))
features1 <- data.frame(feature=unique(f1.curated$feature))
allFeatures <- features0
allFeatures_new <- join(allFeatures, features1, by="feature", type="full")
allFeatures_new <- allFeatures_new[with(allFeatures_new, order(featureID)),]
# Create unique featureIDs
allFeatures_new$featureID <- seq(1, length(allFeatures_new$featureID))
head(allFeatures_new)
View(allFeatures_new)
allFeatures_new <- allFeatures_new[with(allFeatures_new, order(featureID)),]
allFeatures_new$featureID <- seq(1, length(allFeatures_new$featureID))
newFeatures <- subset(allFeatures_new, featureID > max(allFeatures$featureID))
write.csv(newFeatures, "Features/features1.csv", row.names=FALSE, quote=FALSE)
allFeatures <- allFeatures_new
write.csv(allFeatures, "Features/allFeatures_0_1.csv", row.names=FALSE, quote=FALSE)
a1 <- read.csv("animals1_long.csv")
a1.count <- count(a1, vars=c("featureID", "feature", "animal"))
a1.count <- a1.count[with(a1.count, order(featureID, -freq)),]
a2 <- read.csv("animals2_long.csv")
a2.count <- count(a2, vars=c("featureID", "feature", "animal"))
a2.count <- a2.count[with(a2.count, order(featureID, -freq)),]
head(a2.count
)
write.csv(a2.count, "animals2_tally_byFeature.csv", row.names=FALSE, quote=FALSE)
a2.top <- read.csv("animals2_tally_byFeature_top.csv", header=FALSE, col.names=c("featureID", "feature", "animal", "count"))
animals2 <- data.frame(animal=unique(a2.top$animal))
head(animals2)
allAnimals <- allAnimals_new
allAnimals_new <- join(allAnimals, animals2, by="animal", type="full")
View(allAnimals_new)
allAnimals_new <- allAnimals_new[with(allAnimals_new, order(animalID)),]
allAnimals_new$animalID <- seq(1, length(allAnimals_new$animalID))
newAnimals <- subset(allAnimals_new, animalID > max(allAnimals$animalID))
write.csv(newAnimals, "Animals/animals2.csv", row.names=FALSE, quote=FALSE, col.names=FALSE)
allAnimals <- allAnimals_new
write.csv(allAnimals, "Animals/allAnimals_0_1_2.csv", row.names=FALSE, quote=FALSE)
f2 <- read.csv("features2_long.csv")
head(f2)
f2.count <- count(f2, vars=c("adjective"))
f2.count <- f2.count[with(f2.count, order(-freq)),]
write.csv(f2.count, "features2_tally_all.csv", row.names=FALSE, quote=FALSE)
f2.syn <- read.csv("features2_synonym.csv")
f2.syn <- subset(f2.syn, !adjective %in% colorWords)
f2.syn.count <- count(f2.syn, vars=c("animalID", "animal", "adjective"))
f2.syn.count <- f2.syn.count[with(f2.syn.count, order(animalID, -freq)),]
write.csv(f2.syn.count, "features2_tally_byAnimal.csv", row.names=FALSE, quote=FALSE)
f2.curated <- read.csv("features2_curated.csv", col.names=c("animalID", "animal", "feature", "count"))
features2 <- data.frame(feature=unique(f1.curated$feature))
head(features2)
features2 <- data.frame(feature=unique(f2.curated$feature))
allFeatures_new <- join(allFeatures, features2, by="feature", type="full")
allFeatures_new <- allFeatures_new[with(allFeatures_new, order(featureID)),]
allFeatures_new$featureID <- seq(1, length(allFeatures_new$featureID))
View(allFeatures)
View(allFeatures_new)
f0 <- read.csv("features0_long.csv")
f0.count <- f0.count[with(f0.count, order(-freq)),]
f0.count <- count(f0, vars=c("adjective"))
f0.count <- f0.count[with(f0.count, order(-freq)),]
f0.syn <- read.csv("features0_synonym.csv")
f0.syn <- subset(f0.syn, !adjective %in% colorWords)
f0.syn.count <- count(f0.syn, vars=c("categoryID", "animal", "adjective"))
f0.syn.count <- f0.syn.count[with(f0.syn.count, order(categoryID, -freq)),]
f0.curated <- read.csv("features0_curated.csv", header=FALSE, col.names=c("categoryID", "animal", "feature", "count"))
features0 <- data.frame(featureID=seq(1, length(unique(f0.curated$feature))))
features0$feature <- unique(f0.curated$feature)
allFeatures <- features0
f1 <- read.csv("features1_long.csv")
f1$categoryID <- NULL
animals1 <- read.csv("Animals/animals1.csv")
f1 <- join(f1, animals1, by="animal")
f1.count <- count(f1, vars=c("adjective"))
f1.count <- f1.count[with(f1.count, order(-freq)),]
f1.syn <- read.csv("features1_synonym.csv")
f1.syn$categoryID <- NULL
f1.syn <- join(f1.syn, animals1, by="animal")
f1.syn <- subset(f1.syn, !adjective %in% colorWords)
f1.syn <- read.csv("features1_synonym.csv")
f1.syn$categoryID <- NULL
f1.syn <- join(f1.syn, animals1, by="animal")
f1.syn <- subset(f1.syn, !adjective %in% colorWords)
f1.syn.count <- count(f1.syn, vars=c("animalID", "animal", "adjective"))
f1.syn.count <- f1.syn.count[with(f1.syn.count, order(animalID, -freq)),]
f1.curated <- read.csv("features1_curated.csv", col.names=c("animalID", "animal", "feature", "count"))
# Make data frame for new features
features1 <- data.frame(feature=unique(f1.curated$feature))
# Join allFeatures so far with features from this iteration
allFeatures_new <- join(allFeatures, features1, by="feature", type="full")
allFeatures_new <- allFeatures_new[with(allFeatures_new, order(featureID)),]
# Create unique featureIDs
allFeatures_new$featureID <- seq(1, length(allFeatures_new$featureID))
# Extract only features that were not in the old set
newFeatures <- subset(allFeatures_new, featureID > max(allFeatures$featureID))
allFeatures <- allFeatures_new
f2 <- read.csv("features2_long.csv")
# Count tokens for each feature; sort
f2.count <- count(f2, vars=c("adjective"))
f2.count <- f2.count[with(f2.count, order(-freq)),]
f2.syn <- read.csv("features2_synonym.csv")
f2.syn <- subset(f2.syn, !adjective %in% colorWords)
# Count tokens for each feature for each animal; sort
f2.syn.count <- count(f2.syn, vars=c("animalID", "animal", "adjective"))
f2.syn.count <- f2.syn.count[with(f2.syn.count, order(animalID, -freq)),]
f2.curated <- read.csv("features2_curated.csv", col.names=c("animalID", "animal", "feature", "count"))
# Make data frame for new features
features2 <- data.frame(feature=unique(f2.curated$feature))
# Join allFeatures so far with features from this iteration
allFeatures_new <- join(allFeatures, features2, by="feature", type="full")
allFeatures_new <- allFeatures_new[with(allFeatures_new, order(featureID)),]
# Create unique featureIDs
allFeatures_new$featureID <- seq(1, length(allFeatures_new$featureID))
# Extract only features that were not in the old set
newFeatures <- subset(allFeatures_new, featureID > max(allFeatures$featureID))
View(allFeatures_new)
f2.curated <- read.csv("features2_curated.csv", col.names=c("animalID", "animal", "feature", "count"))
# Make data frame for new features
features2 <- data.frame(feature=unique(f2.curated$feature))
# Join allFeatures so far with features from this iteration
allFeatures_new <- join(allFeatures, features2, by="feature", type="full")
allFeatures_new <- allFeatures_new[with(allFeatures_new, order(featureID)),]
# Create unique featureIDs
allFeatures_new$featureID <- seq(1, length(allFeatures_new$featureID))
# Extract only features that were not in the old set
newFeatures <- subset(allFeatures_new, featureID > max(allFeatures$featureID))
View(newFeatures)
write.csv(newFeatures, "Features/features2.csv", row.names=FALSE, quote=FALSE)
allFeatures <- allFeatures_new
write.csv(allFeatures, "Features/allFeatures_0_1_2.csv", row.names=FALSE, quote=FALSE)
head(f0.curated)
colnames(f0.curated) <- c("animalID", "animal", "feature", "count")
head(f0.curated)
head(f1.curated)
head(f2.curated)
allFeaturesGivenAnimals <- rbind(f0.curated, f1.curated, f2.curated)
head(allFeaturesGivenAnimals)
unique(alFeatureGivenAnimals$animalID)
unique(allFeaturesGivenAnimals$animalID)
write.csv(allFeaturesGivenAnimals, "Features/allFeatures_givenAnimals.csv", row.names=FALSE, quote=FALSE)
head(a1.top)
allAnimals <- read.csv("Animals/animals0.csv", header=FALSE, col.names=c("animalID", "animal"))
a1 <- read.csv("animals1_long.csv")
a1.count <- count(a1, vars=c("featureID", "feature", "animal"))
a1.count <- a1.count[with(a1.count, order(featureID, -freq)),]
a1.top <- read.csv("animals1_tally_byFeature_top.csv", header=FALSE, col.names=c("featureID", "feature", "animal", "count"))
# Make data frame for salient animals
animals1 <- data.frame(animal=unique(a1.top$animal))
allAnimals_new <- join(allAnimals, animals1, by="animal", type="full")
allAnimals_new <- allAnimals_new[with(allAnimals_new, order(animalID)),]
# Add unique animalID for each animal
allAnimals_new$animalID <- seq(1, length(allAnimals_new$animalID))
# Extract new animals that were not in existing set of animals
newAnimals <- subset(allAnimals_new, animalID > max(allAnimals$animalID))
allAnimals <- allAnimals_new
write.csv(allAnimals, "Animals/allAnimals_0_1.csv", row.names=FALSE, quote=FALSE)
a2 <- read.csv("animals2_long.csv")
a2.count <- count(a2, vars=c("featureID", "feature", "animal"))
a2.count <- a2.count[with(a2.count, order(featureID, -freq)),]
a2.top <- read.csv("animals2_tally_byFeature_top.csv", header=FALSE, col.names=c("featureID", "feature", "animal", "count"))
# Make data frame for salient animals
animals2 <- data.frame(animal=unique(a2.top$animal))
allAnimals_new <- join(allAnimals, animals2, by="animal", type="full")
allAnimals_new <- allAnimals_new[with(allAnimals_new, order(animalID)),]
# Add unique animalID for each animal
allAnimals_new$animalID <- seq(1, length(allAnimals_new$animalID))
# Extract new animals that were not in existing set of animals
newAnimals <- subset(allAnimals_new, animalID > max(allAnimals$animalID))
allAnimals <- allAnimals_new
head(a1.top)
head(a2.top)
head(a3.top)
alAnimalsGivenFeatures <- rbind(f1.top, f2.top)
alAnimalsGivenFeatures <- rbind(a1.top, a2.top)
allAnimalsGivenFeatures <- rbind(a1.top, a2.top)
head(allAnimalsGivenFeatures)
write.csv(allAnimalsGivenFeatures, "Animals/allAnimals_givenFeatures.csv", row.names=FALSE, quote=FALSE)
f2.curated <- read.csv("features2_curated.csv", col.names=c("animalID", "animal", "feature", "count"))
# Make data frame for new features
features2 <- data.frame(feature=unique(f2.curated$feature))
# Join allFeatures so far with features from this iteration
allFeatures_new <- join(allFeatures, features2, by="feature", type="full")
allFeatures_new <- allFeatures_new[with(allFeatures_new, order(featureID)),]
# Create unique featureIDs
allFeatures_new$featureID <- seq(1, length(allFeatures_new$featureID))
# Extract only features that were not in the old set
newFeatures <- subset(allFeatures_new, featureID > max(allFeatures$featureID))
# Write new features from this iteration
write.csv(newFeatures, "Features/features2.csv", row.names=FALSE, quote=FALSE)
###################################
# Update all features so far
allFeatures <- allFeatures_new
write.csv(allFeatures, "Features/allFeatures_0_1_2.csv", row.names=FALSE, quote=FALSE)
###################################
###################################
# Make data frame of features given all animals
###################################
colnames(f0.curated) <- c("animalID", "animal", "feature", "count")
allFeaturesGivenAnimals <- rbind(f0.curated, f1.curated, f2.curated)
write.csv(allFeaturesGivenAnimals, "Features/allFeatures_givenAnimals.csv", row.names=FALSE, quote=FALSE)
animalIDs <- read.csv("Animals/allAnimals.csv")
data <- read.csv("animals_alternatives_features.csv")
head(animalIDs)
head(data)
data <- join(data, animalIDs, by="animal")
head(data)
animalIDs <- read.csv("Animals/allAnimals.csv")
data <- read.csv("animals_alternatives_features.csv")
data <- join(animalIDs, data, by="animal")
head(data)
View(data)
write.csv(data, "animals_alternatives_features_sorted.csv")
write.csv(data, "animals_alternatives_features_sorted.csv", row.names=FALSE, quote=FALSE)
sum(data$numFeatures)
sum(data$numFeatures * data$numAlts)
data.features <- read.csv("alternatives_per_feature.csv")
?join
data.features <- join(animalIDs, data, by="animal", type="right")
View(data.features)
data.features <- read.csv("alternatives_per_feature.csv")
data.features <- join(animalIDs, data.features, by="animal", type="right")
View(data.features)
data.features <- data.features[c("animalID", "animal", "feature", "alternatives", "numAlts")]
View(data.features)
featureIDs <- read.csv("Features/allFeatures_0_1_2.csv")
head(featureIDs)
data.features <- join(featureIDs, data.features, by="feature", type="right")
data.features <- data.features[c("animalID", "animal", "featureID", "feature", "alternatives", "numAlts")]
View(data.features)
data.features <- data.features[with(data.features, order(animalID, featureID)),]
View(data.features)
write.csv(data.features, "alternatives_per_feature_sorted.csv", row.names=FALSE, quote=FALSE)
data.feature.animals <- read.csv("features_and_associated_animals.csv")
data.feature.animals <- join(featureIDs, data.feature.animals, by=c("feature"), type="right")
head(data.feature.aniamls)
head(data.feature.animals)
data.feature.animals <- data.feature.animals[c("featureID", "feature", "animals", "numAnimals")]
head(data.feature.animals)
write.csv(data.feature.animals, "features_and_associated_animals_sorted.csv", row.names=FALSE, quote=FALSE)
data.feature.animals <- data.feature.animals[with(data.feature.animals, order(featureID)),]
write.csv(data.feature.animals, "features_and_associated_animals_sorted.csv", row.names=FALSE, quote=FALSE)
View(featureIDs)
featureIDs <- read.csv("Features/allFeatures_0_1_2.csv")
View(featureIDs)
featureIDs <- read.csv("Features/allFeatures_0_1_2.csv")
data.features <- read.csv("alternatives_per_feature.csv")
data.features <- join(animalIDs, data.features, by="animal", type="right")
data.features <- join(featureIDs, data.features, by="feature", type="right")
data.features <- data.features[c("animalID", "animal", "featureID", "feature", "alternatives", "numAlts")]
data.features <- data.features[with(data.features, order(animalID, featureID)),]
write.csv(data.features, "alternatives_per_feature_sorted.csv", row.names=FALSE, quote=FALSE)
data.feature.animals <- read.csv("features_and_associated_animals.csv")
data.feature.animals <- join(featureIDs, data.feature.animals, by=c("feature"), type="right")
data.feature.animals <- data.feature.animals[c("featureID", "feature", "animals", "numAnimals")]
data.feature.animals <- data.feature.animals[with(data.feature.animals, order(featureID)),]
write.csv(data.feature.animals, "features_and_associated_animals_sorted.csv", row.names=FALSE, quote=FALSE)
p <- read.csv("../../mTurkScripts/SeedingPriorExp/LaunchPriors/priors-trials.csv")
head(p)
p <- p[complete.cases(p),]
head(p)
p <- read.csv("../../mTurkScripts/SeedingPriorExp/LaunchPriors/priors-trials.csv")
nrow(p)
p[complete.cases(p),]
p <- p[complete.cases(p),]
nrow(p)
p <- read.csv("../../mTurkScripts/SeedingPriorExp/LaunchPriors/priors-trials.csv")
nrow(p)
p <- p[complete.cases(p),]
head(p)
subset(p, is.na(response))
p <- read.csv("../../mTurkScripts/SeedingPriorExp/LaunchPriors/priors-trials.csv")
subset(p, is.na(response))
subset(p, is.na(response))
remove.workerIDs <- subset(p, is.na(response))$workerid
remove.workerIDs <- unique(subset(p, is.na(response))$workerid)
remove.workerIDs
p <- subset(p, workerid %in remove.workerIDs)
p <- subset(p, workerid %in% remove.workerIDs)
head(p)
p <- read.csv("../../mTurkScripts/SeedingPriorExp/LaunchPriors/priors-trials.csv")
remove.workerIDs <- unique(subset(p, is.na(response))$workerid)
p <- subset(p, workerid !%in% remove.workerIDs)
p <- read.csv("../../mTurkScripts/SeedingPriorExp/LaunchPriors/priors-trials.csv")
# Remove subjects with NAs
remove.workerIDs <- unique(subset(p, is.na(response))$workerid)
p <- subset(p, !workerid %in% remove.workerIDs)
View(p)
p.summary <- summarySE(p, measurevar="response", groupvars=c("featureID", "feature", "animal"))
head(p.summary)
length(unique(p.summary$featureID))
ggplot(subset(p.summary, featureID==1), aes(x=animal, y=response)) +
geom_point() +
geom_errorbar(aes(ymin=response-ci, ymax=response+se)) +
theme_bw()
ggplot(subset(p.summary, featureID==1), aes(x=animal, y=response)) +
geom_point() +
geom_errorbar(aes(ymin=response-ci, ymax=response+se), width=0.05) +
theme_bw()
?scale
head(p)
p$z <- ave(p$response, p$workerid, FUN=scale)
head(p)
p.summary <- summarySE(p, measurevar="z", groupvars=c("featureID", "feature", "animal"))
ggplot(subset(p.summary, featureID==1), aes(x=animal, y=z)) +
geom_point() +
geom_errorbar(aes(ymin=z-ci, ymax=z+se), width=0.05) +
theme_bw()
feature.summary <- subset(p.summary, featureID==1)
feature.summary <- subset(p.summary, featureID==1)
feature.summary <- transform(feature.summary, animal=reorder(animal, -z))
ggplot(feature.summary, aes(x=animal, y=z)) +
geom_point() +
geom_errorbar(aes(ymin=z-ci, ymax=z+se), width=0.05) +
theme_bw()
feature.summary <- subset(p.summary, featureID==2)
feature.summary <- transform(feature.summary, animal=reorder(animal, -z))
ggplot(feature.summary, aes(x=animal, y=z)) +
geom_point() +
geom_errorbar(aes(ymin=z-ci, ymax=z+se), width=0.05) +
theme_bw()
ggplot(feature.summary, aes(x=animal, y=z)) +
geom_point() +
geom_errorbar(aes(ymin=z-ci, ymax=z+se), width=0.05) +
theme_bw() +
ggtitle(feature)
head(feature.summary)
ggplot(feature.summary, aes(x=animal, y=z)) +
geom_point() +
geom_errorbar(aes(ymin=z-ci, ymax=z+se), width=0.05) +
theme_bw() +
ggtitle(feature.summary$feature)
feature.summary <- subset(p.summary, featureID==3)
feature.summary <- transform(feature.summary, animal=reorder(animal, -z))
ggplot(feature.summary, aes(x=animal, y=z)) +
geom_point() +
geom_errorbar(aes(ymin=z-ci, ymax=z+se), width=0.05) +
theme_bw() +
ggtitle(feature.summary$feature)
feature.summary <- subset(p.summary, featureID==4)
feature.summary <- transform(feature.summary, animal=reorder(animal, -z))
ggplot(feature.summary, aes(x=animal, y=z)) +
geom_point() +
geom_errorbar(aes(ymin=z-ci, ymax=z+se), width=0.05) +
theme_bw() +
ggtitle(feature.summary$feature)
feature.summary <- subset(p.summary, featureID==5)
feature.summary <- transform(feature.summary, animal=reorder(animal, -z))
ggplot(feature.summary, aes(x=animal, y=z)) +
geom_point() +
geom_errorbar(aes(ymin=z-ci, ymax=z+se), width=0.05) +
theme_bw() +
ggtitle(feature.summary$feature)
feature.summary <- subset(p.summary, featureID==6)
feature.summary <- transform(feature.summary, animal=reorder(animal, -z))
ggplot(feature.summary, aes(x=animal, y=z)) +
geom_point() +
geom_errorbar(aes(ymin=z-ci, ymax=z+se), width=0.05) +
theme_bw() +
ggtitle(feature.summary$feature)
p <- read.csv("../../mTurkScripts/SeedingPriorExp/LaunchPriors/priors-trials.csv")
# Remove subjects with NAs
remove.workerIDs <- unique(subset(p, is.na(response))$workerid)
p <- subset(p, !workerid %in% remove.workerIDs)
p$z <- ave(p$response, p$workerid, FUN=scale)
p.summary <- summarySE(p, measurevar="z", groupvars=c("featureID", "feature", "animal"))
feature.summary <- subset(p.summary, featureID==6)
feature.summary <- transform(feature.summary, animal=reorder(animal, -z))
ggplot(feature.summary, aes(x=animal, y=z)) +
geom_point() +
geom_errorbar(aes(ymin=z-ci, ymax=z+se), width=0.05) +
theme_bw() +
ggtitle(feature.summary$feature)
?facet_wrap
ggplot(p.summary, aes(x=animal, y=z)) +
geom_point() +
geom_errorbar(aes(ymin=z-ci, ymax=z+se), width=0.05) +
theme_bw() +
ggtitle(feature.summary$feature) +
facet_wrap(~featureID, scales="free_x")
ggplot(p.summary, aes(x=animal, y=z)) +
geom_point() +
geom_errorbar(aes(ymin=z-ci, ymax=z+se), width=0.05) +
theme_bw() +
ggtitle(feature.summary$feature) +
facet_wrap(~featureID, scales="free_x", ncol=5)
p.summary <- transform(p.summary, animal=reorder(animal, -z))
ggplot(p.summary, aes(x=animal, y=z)) +
geom_point() +
geom_errorbar(aes(ymin=z-ci, ymax=z+se), width=0.05) +
theme_bw() +
ggtitle(feature.summary$feature) +
facet_wrap(~feature, scales="free_x", ncol=5)
head(p.summary)
ggplot(p.summary, aes(reorder(animal, z))) +
geom_point() +
geom_errorbar(aes(ymin=z-ci, ymax=z+se), width=0.05) +
theme_bw() +
facet_wrap(~feature, scales="free_x", ncol=5)
ggplot(p.summary, aes(x=reorder(animal, z), y=z)) +
geom_point() +
geom_errorbar(aes(ymin=z-ci, ymax=z+se), width=0.05) +
theme_bw() +
facet_wrap(~feature, scales="free_x", ncol=5)
ggplot(feature.summary, aes(x=animal, y=z)) +
geom_point() +
geom_errorbar(aes(ymin=z-ci, ymax=z+ci), width=0.05) +
theme_bw() +
ggtitle(feature.summary$feature)
head(p)
with(p, cor.test(response, z))
ggplot(p, aes(x=response, y=z)) +
geom_point() +
theme_bw()
ggplot(p, aes(x=response, y=z, color=feature)) +
geom_point() +
theme_bw()
ggplot(p, aes(x=response, y=z, color=workerid)) +
geom_point() +
theme_bw()
ggplot(p, aes(x=response, y=z, color=factor(workerid))) +
geom_point() +
theme_bw()
p.summary <- summarySE(p, measurevar="response", groupvars=c("featureID", "feature", "animal"))
p.summary <- transform(p.summary, animal=reorder(animal, -response))
feature.summary <- subset(p.summary, featureID==6)
feature.summary <- transform(feature.summary, animal=reorder(animal, -response))
ggplot(feature.summary, aes(x=animal, y=response)) +
geom_point() +
geom_errorbar(aes(ymin=response-ci, ymax=response+ci), width=0.05) +
theme_bw() +
ggtitle(feature.summary$feature)
head(p)
?histogram
?hist
response.hist <- hist(data=p, response ~ feature + animal)
response.hist <- hist(data=p, response ~ animal)
p$feature <- factor(p$feature)
p$animal <- factor(p$animal)
response.hist <- hist(data=p, response ~ feature * animal)
head(p)
View(p)
remove.workerIDs <- unique(subset(p, is.na(response))$workerid)
p <- read.csv("../../mTurkScripts/SeedingPriorExp/LaunchPriors/priors-trials.csv")
# Remove subjects with NAs
remove.workerIDs <- unique(subset(p, is.na(response))$workerid)
p <- subset(p, !workerid %in% remove.workerIDs)
p$feature <- factor(p$feature)
p$animal <- factor(p$animal)
p$z <- ave(p$response, p$workerid, FUN=scale)
p.summary <- summarySE(p, measurevar="response", groupvars=c("featureID", "feature", "animal"))
p.summary <- transform(p.summary, animal=reorder(animal, -response))
ggplot(p.summary, aes(x=reorder(animal, response), y=response)) +
geom_point() +
geom_errorbar(aes(ymin=response-ci, ymax=response+ci), width=0.05) +
theme_bw() +
facet_wrap(~feature, scales="free_x", ncol=5)
response.hist <- hist(data=p, response ~ feature * animal)
response.hist <- hist(data=p, featureID ~ feature * animal)
?hist
hist(Sepal.Length~Species,data=iris)
p$response <- as.numeric(p$response)
response.hist <- hist(data=p, featureID ~ feature * animal)
response.hist <- hist(data=p, response)
response.hist <- hist(data=p, x=response)
?hist
response.hist <- hist(p$response)
response.hist <- hist.formula(p$response)
install.packages("FSA")
feature.summary <- subset(p.summary, feature=="industrious")
feature.summary <- transform(feature.summary, animal=reorder(animal, -response))
ggplot(feature.summary, aes(x=animal, y=response)) +
geom_point() +
geom_errorbar(aes(ymin=response-ci, ymax=response+ci), width=0.05) +
theme_bw() +
ggtitle(feature.summary$feature)
feature.summary <- subset(p.summary, feature=="industrious")
feature.summary <- transform(feature.summary, animal=reorder(animal, -response))
ggplot(feature.summary, aes(x=animal, y=response)) +
geom_point() +
geom_errorbar(aes(ymin=response-ci, ymax=response+ci), width=0.05) +
theme_bw() +
ggtitle(feature.summary$feature)
ggplot(feature.summary, aes(x=animal, y=response)) +
geom_point() +
geom_errorbar(aes(ymin=response-ci, ymax=response+ci), width=0.05) +
theme_bw()
head(feature.summary)
feature.summary <- transform(feature.summary, animal=reorder(animal, -response))
head(feature.summary)
ggplot(feature.summary, aes(x=animal, y=response)) +
geom_point() +
geom_errorbar(aes(ymin=response-ci, ymax=response+ci), width=0.05) +
theme_bw() +
ggtitle(feature.summary$feature)
