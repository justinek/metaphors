m.splithalf.comp <- join(p1.summary, p2.summary, by=c("categoryID", "animal", "featureSetNum", "condition"))
m.splithalf.comp <- m.splithalf.comp[complete.cases(m.splithalf.comp),]
this.cor <- with(m.splithalf.comp, cor(p1prob, p2prob))
m.cor <- data.frame(cors=this.cor, proph=prophet(this.cor, 2))
m.cors <- rbind(m.cor, m.cors)
}
check <- subset(m.set.long, metaphor=="1")
m.cors <- data.frame(cors=NULL, proph=NULL)
for (t in seq(1, 100)) {
ii <- seq_len(nrow(check))
ind1 <- sample(ii, nrow(check) / 2)
ind2 <- ii[!ii %in% ind1]
p1 <- check[ind1, ]
p2 <- check[ind2, ]
#p1.summary <- summarySE(fp.set.long, measurevar="normalizedProb", groupvars=c("categoryID", "type", "featureSetNum"))
p1.summary <- summarySE(p1, measurevar="normalizedProb", groupvars=c("categoryID", "animal", "featureSetNum", "condition"))
p2.summary <- summarySE(p2, measurevar="normalizedProb", groupvars=c("categoryID", "animal", "featureSetNum", "condition"))
colnames(p1.summary)[6] <- "p1prob"
colnames(p2.summary)[6] <- "p2prob"
m.splithalf.comp <- join(p1.summary, p2.summary, by=c("categoryID", "animal", "featureSetNum", "condition"))
m.splithalf.comp <- m.splithalf.comp[complete.cases(m.splithalf.comp),]
this.cor <- with(m.splithalf.comp, cor(p1prob, p2prob))
m.cor <- data.frame(cors=this.cor, proph=prophet(this.cor, 2))
m.cors <- rbind(m.cor, m.cors)
}
head(check)
m.cors <- data.frame(cors=NULL, proph=NULL)
for (t in seq(1, 10)) {
ii <- seq_len(nrow(check))
ind1 <- sample(ii, nrow(check) / 2)
ind2 <- ii[!ii %in% ind1]
p1 <- check[ind1, ]
p2 <- check[ind2, ]
#p1.summary <- summarySE(fp.set.long, measurevar="normalizedProb", groupvars=c("categoryID", "type", "featureSetNum"))
p1.summary <- summarySE(p1, measurevar="normalizedProb", groupvars=c("categoryID", "animal", "featureSetNum", "condition"))
p2.summary <- summarySE(p2, measurevar="normalizedProb", groupvars=c("categoryID", "animal", "featureSetNum", "condition"))
colnames(p1.summary)[6] <- "p1prob"
colnames(p2.summary)[6] <- "p2prob"
m.splithalf.comp <- join(p1.summary, p2.summary, by=c("categoryID", "animal", "featureSetNum", "condition"))
m.splithalf.comp <- m.splithalf.comp[complete.cases(m.splithalf.comp),]
this.cor <- with(m.splithalf.comp, cor(p1prob, p2prob))
m.cor <- data.frame(cors=this.cor, proph=prophet(this.cor, 2))
m.cors <- rbind(m.cor, m.cors)
}
m.set.long$condition <- factor(m.set.long$condition)
m.set.long$featureSetNum <- factor(m.set.long$featureSetNum)
ggplot(m.set.long, aes(x=value)) +
geom_histogram(binwidth=0.02)
m.set.normalizing <- aggregate(data=m.set.long, value ~ workerid + categoryID + animal + qud + metaphor + condition, FUN=sum)
colnames(m.set.normalizing)[7] <- "normalizing"
m.set.long <- join(m.set.long, m.set.normalizing, by=c("workerid", "categoryID", "animal", "qud", "metaphor", "condition"))
# filter out rows with 0 as normalizer
m.set.long <- subset(m.set.long, normalizing != 0)
m.set.long$normalizedProb <- m.set.long$value / m.set.long$normalizing
m.set.long.summary <- summarySE(m.set.long, measurevar="normalizedProb",
groupvars=c("categoryID", "animal", "metaphor", "qud", "featureSetNum", "condition"))
#### sanity check ####
sanity <- subset(m.set.long.summary, as.numeric(categoryID) <= 10)
ggplot(sanity, aes(x=featureSetNum, y=normalizedProb, fill=featureSetNum)) +
geom_bar(stat="identity", color="black") +
geom_errorbar(aes(ymin=normalizedProb-se, ymax=normalizedProb+se)) +
theme_bw() +
facet_grid(condition ~ categoryID)
m.set.long.summary.condition <- summarySE(m.set.long.summary, measurevar="normalizedProb",
groupvars=c("metaphor", "qud", "featureSetNum"))
m.set.long.summary.condition$qud <- factor(m.set.long.summary.condition$qud)
m.set.long.summary.condition$metaphor <- factor(m.set.long.summary.condition$metaphor)
m.set.long.summary.condition$labels <- ifelse(m.set.long.summary.condition$featureSetNum=="1",
"f1,f2,f3",
ifelse(m.set.long.summary.condition$featureSetNum=="2",
"f1,f2,0",
ifelse(m.set.long.summary.condition$featureSetNum=="3",
"f1,0,f3",
ifelse(m.set.long.summary.condition$featureSetNum=="4",
"f1,0,0",
ifelse(m.set.long.summary.condition$featureSetNum=="5",
"0,f2,f3",
ifelse(m.set.long.summary.condition$featureSetNum=="6",
"0,f2,0",
ifelse(m.set.long.summary.condition$featureSetNum=="7",
"0,0,f3", "0,0,0")))))))
m.set.long.summary.condition$labels <- factor(m.set.long.summary.condition$labels,
levels=rev(levels(m.set.long.summary.condition$labels)))
ggplot(m.set.long.summary.condition, aes(x=qud, y=normalizedProb, fill=labels)) +
geom_bar(stat="identity", color="black", position=position_dodge()) +
geom_errorbar(aes(ymin=normalizedProb-se, ymax=normalizedProb+se), position=position_dodge(0.9), width=0.2) +
theme_bw() +
scale_fill_brewer(palette="RdGy") +
facet_grid(.~ metaphor)
m.set <- read.csv("data80-set-long.csv")
#########################
# Long form
########################
m.set.long <- melt(m.set, id=c("workerid", "gender", "age", "income", "categoryID", "order", "animal", "condition"))
m.set.long$featureSetNum <- unlist(lapply(strsplit(as.character(m.set.long$variable), "X"), "[", 2))
m.set.long$qud <- ifelse(m.set.long$condition==1 | m.set.long$condition==2, 0, 1)
m.set.long$metaphor <- ifelse(m.set.long$condition==1 | m.set.long$condition==3, 0, 1)
m.set.long$qud <- factor(m.set.long$qud)
m.set.long$metaphor <- factor(m.set.long$metaphor)
####################################
# Split half
####################################
prophet <- function(r, n) {
return ((n*r) / (1 + (n-1)*r))
}
#check <- m.set.long
check <- subset(m.set.long, metaphor=="1")
m.cors <- data.frame(cors=NULL, proph=NULL)
for (t in seq(1, 10)) {
ii <- seq_len(nrow(check))
ind1 <- sample(ii, nrow(check) / 2)
ind2 <- ii[!ii %in% ind1]
p1 <- check[ind1, ]
p2 <- check[ind2, ]
#p1.summary <- summarySE(fp.set.long, measurevar="normalizedProb", groupvars=c("categoryID", "type", "featureSetNum"))
p1.summary <- summarySE(p1, measurevar="normalizedProb", groupvars=c("categoryID", "animal", "featureSetNum", "condition"))
p2.summary <- summarySE(p2, measurevar="normalizedProb", groupvars=c("categoryID", "animal", "featureSetNum", "condition"))
colnames(p1.summary)[6] <- "p1prob"
colnames(p2.summary)[6] <- "p2prob"
m.splithalf.comp <- join(p1.summary, p2.summary, by=c("categoryID", "animal", "featureSetNum", "condition"))
m.splithalf.comp <- m.splithalf.comp[complete.cases(m.splithalf.comp),]
this.cor <- with(m.splithalf.comp, cor(p1prob, p2prob))
m.cor <- data.frame(cors=this.cor, proph=prophet(this.cor, 2))
m.cors <- rbind(m.cor, m.cors)
}
m.set.long$condition <- factor(m.set.long$condition)
m.set.long$featureSetNum <- factor(m.set.long$featureSetNum)
ggplot(m.set.long, aes(x=value)) +
geom_histogram(binwidth=0.02)
m.set.normalizing <- aggregate(data=m.set.long, value ~ workerid + categoryID + animal + qud + metaphor + condition, FUN=sum)
colnames(m.set.normalizing)[7] <- "normalizing"
m.set.long <- join(m.set.long, m.set.normalizing, by=c("workerid", "categoryID", "animal", "qud", "metaphor", "condition"))
# filter out rows with 0 as normalizer
m.set.long <- subset(m.set.long, normalizing != 0)
m.set.long$normalizedProb <- m.set.long$value / m.set.long$normalizing
m.set.long.summary <- summarySE(m.set.long, measurevar="normalizedProb",
groupvars=c("categoryID", "animal", "metaphor", "qud", "featureSetNum", "condition"))
#### sanity check ####
sanity <- subset(m.set.long.summary, as.numeric(categoryID) <= 10)
ggplot(sanity, aes(x=featureSetNum, y=normalizedProb, fill=featureSetNum)) +
geom_bar(stat="identity", color="black") +
geom_errorbar(aes(ymin=normalizedProb-se, ymax=normalizedProb+se)) +
theme_bw() +
facet_grid(condition ~ categoryID)
m.set.long.summary.condition <- summarySE(m.set.long.summary, measurevar="normalizedProb",
groupvars=c("metaphor", "qud", "featureSetNum"))
m.set.long.summary.condition$qud <- factor(m.set.long.summary.condition$qud)
m.set.long.summary.condition$metaphor <- factor(m.set.long.summary.condition$metaphor)
m.set.long.summary.condition$labels <- ifelse(m.set.long.summary.condition$featureSetNum=="1",
"f1,f2,f3",
ifelse(m.set.long.summary.condition$featureSetNum=="2",
"f1,f2,0",
ifelse(m.set.long.summary.condition$featureSetNum=="3",
"f1,0,f3",
ifelse(m.set.long.summary.condition$featureSetNum=="4",
"f1,0,0",
ifelse(m.set.long.summary.condition$featureSetNum=="5",
"0,f2,f3",
ifelse(m.set.long.summary.condition$featureSetNum=="6",
"0,f2,0",
ifelse(m.set.long.summary.condition$featureSetNum=="7",
"0,0,f3", "0,0,0")))))))
m.set.long.summary.condition$labels <- factor(m.set.long.summary.condition$labels,
levels=rev(levels(m.set.long.summary.condition$labels)))
ggplot(m.set.long.summary.condition, aes(x=qud, y=normalizedProb, fill=labels)) +
geom_bar(stat="identity", color="black", position=position_dodge()) +
geom_errorbar(aes(ymin=normalizedProb-se, ymax=normalizedProb+se), position=position_dodge(0.9), width=0.2) +
theme_bw() +
scale_fill_brewer(palette="RdGy") +
facet_grid(.~ metaphor)
head(m.set.long.summary)
ggplot(m.set.long.summary.condition, aes(x=qud, y=normalizedProb, fill=labels)) +
geom_bar(stat="identity", color="black", position=position_dodge()) +
geom_errorbar(aes(ymin=normalizedProb-se, ymax=normalizedProb+se), position=position_dodge(0.9), width=0.2) +
theme_bw() +
scale_fill_brewer(palette="RdGy") +
facet_grid(.~ metaphor)
ggplot(sanity, aes(x=featureSetNum, y=normalizedProb, fill=featureSetNum)) +
geom_bar(stat="identity", color="black") +
geom_errorbar(aes(ymin=normalizedProb-se, ymax=normalizedProb+se)) +
theme_bw() +
facet_grid(condition ~ categoryID)
ggplot(m.set.long.summary.condition, aes(x=qud, y=normalizedProb, fill=featureSetNum)) +
geom_bar(stat="identity", color="black", position=position_dodge()) +
geom_errorbar(aes(ymin=normalizedProb-se, ymax=normalizedProb+se), position=position_dodge(0.9), width=0.2) +
theme_bw() +
scale_fill_brewer(palette="RdGy") +
facet_grid(.~ metaphor)
m.set.long.summary.condition <- summarySE(m.set.long.summary, measurevar="normalizedProb",
groupvars=c("metaphor", "qud", "featureSetNum"))
m.set.long.summary.condition$qud <- factor(m.set.long.summary.condition$qud)
m.set.long.summary.condition$metaphor <- factor(m.set.long.summary.condition$metaphor)
m.set.long.summary.condition$names <- ifelse(m.set.long.summary.condition$featureSetNum=="1",
"f1,f2,f3",
ifelse(m.set.long.summary.condition$featureSetNum=="2",
"f1,f2,0",
ifelse(m.set.long.summary.condition$featureSetNum=="3",
"f1,0,f3",
ifelse(m.set.long.summary.condition$featureSetNum=="4",
"f1,0,0",
ifelse(m.set.long.summary.condition$featureSetNum=="5",
"0,f2,f3",
ifelse(m.set.long.summary.condition$featureSetNum=="6",
"0,f2,0",
ifelse(m.set.long.summary.condition$featureSetNum=="7",
"0,0,f3", "0,0,0")))))))
m.set.long.summary.condition$names <- factor(m.set.long.summary.condition$labels,
levels=rev(levels(m.set.long.summary.condition$labels)))
ggplot(m.set.long.summary.condition, aes(x=qud, y=normalizedProb, fill=names)) +
geom_bar(stat="identity", color="black", position=position_dodge()) +
geom_errorbar(aes(ymin=normalizedProb-se, ymax=normalizedProb+se), position=position_dodge(0.9), width=0.2) +
theme_bw() +
scale_fill_brewer(palette="RdGy") +
facet_grid(.~ metaphor)
m.set.long.summary.condition$names <- factor(m.set.long.summary.condition$names,
levels=rev(levels(m.set.long.summary.condition$names))
)
m.set.long.summary.condition$names <- factor(m.set.long.summary.condition$names,
levels=rev(levels(m.set.long.summary.condition$names)))
ggplot(m.set.long.summary.condition, aes(x=qud, y=normalizedProb, fill=names)) +
geom_bar(stat="identity", color="black", position=position_dodge()) +
geom_errorbar(aes(ymin=normalizedProb-se, ymax=normalizedProb+se), position=position_dodge(0.9), width=0.2) +
theme_bw() +
scale_fill_brewer(palette="RdGy") +
facet_grid(.~ metaphor)
head(m.set.long.summary.condition)
m.set.long.summary.condition$names <- ifelse(m.set.long.summary.condition$featureSetNum=="1",
"f1,f2,f3",
ifelse(m.set.long.summary.condition$featureSetNum=="2",
"f1,f2,0",
ifelse(m.set.long.summary.condition$featureSetNum=="3",
"f1,0,f3",
ifelse(m.set.long.summary.condition$featureSetNum=="4",
"f1,0,0",
ifelse(m.set.long.summary.condition$featureSetNum=="5",
"0,f2,f3",
ifelse(m.set.long.summary.condition$featureSetNum=="6",
"0,f2,0",
ifelse(m.set.long.summary.condition$featureSetNum=="7",
"0,0,f3", "0,0,0")))))))
m.set.long.summary.condition$names <- factor(m.set.long.summary.condition$names,
levels=rev(levels(m.set.long.summary.condition$names)))
ggplot(m.set.long.summary.condition, aes(x=qud, y=normalizedProb, fill=names)) +
geom_bar(stat="identity", color="black", position=position_dodge()) +
geom_errorbar(aes(ymin=normalizedProb-se, ymax=normalizedProb+se), position=position_dodge(0.9), width=0.2) +
theme_bw() +
scale_fill_brewer(palette="RdGy") +
facet_grid(.~ metaphor)
head(m.set.long.summary.condition)
m.set <- read.csv("data80-set-long.csv")
#########################
# Long form
########################
m.set.long <- melt(m.set, id=c("workerid", "gender", "age", "income", "categoryID", "order", "animal", "condition"))
m.set.long$featureSetNum <- unlist(lapply(strsplit(as.character(m.set.long$variable), "X"), "[", 2))
m.set.long$qud <- ifelse(m.set.long$condition==1 | m.set.long$condition==2, 0, 1)
m.set.long$metaphor <- ifelse(m.set.long$condition==1 | m.set.long$condition==3, 0, 1)
m.set.long$qud <- factor(m.set.long$qud)
m.set.long$metaphor <- factor(m.set.long$metaphor)
m.set.long$featureSetNum <- factor(m.set.long$featureSetNum)
####################################
# Split half
####################################
prophet <- function(r, n) {
return ((n*r) / (1 + (n-1)*r))
}
#check <- m.set.long
check <- subset(m.set.long, metaphor=="1")
m.cors <- data.frame(cors=NULL, proph=NULL)
for (t in seq(1, 10)) {
ii <- seq_len(nrow(check))
ind1 <- sample(ii, nrow(check) / 2)
ind2 <- ii[!ii %in% ind1]
p1 <- check[ind1, ]
p2 <- check[ind2, ]
#p1.summary <- summarySE(fp.set.long, measurevar="normalizedProb", groupvars=c("categoryID", "type", "featureSetNum"))
p1.summary <- summarySE(p1, measurevar="normalizedProb", groupvars=c("categoryID", "animal", "featureSetNum", "condition"))
p2.summary <- summarySE(p2, measurevar="normalizedProb", groupvars=c("categoryID", "animal", "featureSetNum", "condition"))
colnames(p1.summary)[6] <- "p1prob"
colnames(p2.summary)[6] <- "p2prob"
m.splithalf.comp <- join(p1.summary, p2.summary, by=c("categoryID", "animal", "featureSetNum", "condition"))
m.splithalf.comp <- m.splithalf.comp[complete.cases(m.splithalf.comp),]
this.cor <- with(m.splithalf.comp, cor(p1prob, p2prob))
m.cor <- data.frame(cors=this.cor, proph=prophet(this.cor, 2))
m.cors <- rbind(m.cor, m.cors)
}
m.set.long$condition <- factor(m.set.long$condition)
m.set.long$featureSetNum <- factor(m.set.long$featureSetNum)
ggplot(m.set.long, aes(x=value)) +
geom_histogram(binwidth=0.02)
#geom_density()
###################################
# No sigmoid
###################################
# normalize to sum ratings for each person/animal in each trial to 1
# get noramlizing factor by summing ratigs for each sbject/category/type
m.set.normalizing <- aggregate(data=m.set.long, value ~ workerid + categoryID + animal + qud + metaphor + condition, FUN=sum)
colnames(m.set.normalizing)[7] <- "normalizing"
m.set.long <- join(m.set.long, m.set.normalizing, by=c("workerid", "categoryID", "animal", "qud", "metaphor", "condition"))
# filter out rows with 0 as normalizer
m.set.long <- subset(m.set.long, normalizing != 0)
m.set.long$normalizedProb <- m.set.long$value / m.set.long$normalizing
m.set.long.summary <- summarySE(m.set.long, measurevar="normalizedProb",
groupvars=c("categoryID", "animal", "metaphor", "qud", "featureSetNum", "condition"))
#### sanity check ####
sanity <- subset(m.set.long.summary, as.numeric(categoryID) <= 10)
ggplot(sanity, aes(x=featureSetNum, y=normalizedProb, fill=featureSetNum)) +
geom_bar(stat="identity", color="black") +
geom_errorbar(aes(ymin=normalizedProb-se, ymax=normalizedProb+se)) +
theme_bw() +
facet_grid(condition ~ categoryID)
############################
# Summary of probability for featureSets across conditions
############################
m.set.long.summary.condition <- summarySE(m.set.long.summary, measurevar="normalizedProb",
groupvars=c("metaphor", "qud", "featureSetNum"))
m.set.long.summary.condition$qud <- factor(m.set.long.summary.condition$qud)
m.set.long.summary.condition$metaphor <- factor(m.set.long.summary.condition$metaphor)
m.set.long.summary.condition$names <- ifelse(m.set.long.summary.condition$featureSetNum=="1",
"f1,f2,f3",
ifelse(m.set.long.summary.condition$featureSetNum=="2",
"f1,f2,0",
ifelse(m.set.long.summary.condition$featureSetNum=="3",
"f1,0,f3",
ifelse(m.set.long.summary.condition$featureSetNum=="4",
"f1,0,0",
ifelse(m.set.long.summary.condition$featureSetNum=="5",
"0,f2,f3",
ifelse(m.set.long.summary.condition$featureSetNum=="6",
"0,f2,0",
ifelse(m.set.long.summary.condition$featureSetNum=="7",
"0,0,f3", "0,0,0")))))))
m.set.long.summary.condition$names <- factor(m.set.long.summary.condition$names,
levels=rev(levels(m.set.long.summary.condition$names)))
ggplot(m.set.long.summary.condition, aes(x=qud, y=normalizedProb, fill=names)) +
geom_bar(stat="identity", color="black", position=position_dodge()) +
geom_errorbar(aes(ymin=normalizedProb-se, ymax=normalizedProb+se), position=position_dodge(0.9), width=0.2) +
theme_bw() +
scale_fill_brewer(palette="RdGy") +
facet_grid(.~ metaphor)
ggplot(m.set.long.summary.condition, aes(x=qud, y=normalizedProb, fill=featureSetNum)) +
geom_bar(stat="identity", color="black", position=position_dodge()) +
geom_errorbar(aes(ymin=normalizedProb-se, ymax=normalizedProb+se), position=position_dodge(0.9), width=0.2) +
theme_bw() +
scale_fill_brewer(palette="RdGy") +
facet_grid(.~ metaphor)
head(m.set.long.summary)
############################
mapping <- read.csv("../FeaturePriorExp/featureSetMapping.csv")
mapping$featureSetNum <- factor(mapping$featureSetNum)
m.set.long.summary <- join(m.set.long.summary, mapping, by=c("featureSetNum"))
head(m.set.long.summary)
m.set.marginal.f1 <- aggregate(subset(m.set.long.summary, f1=="1"),
normalizedProb ~ categoryID + metaphor + qud + condition, FUN=sum)
m.set.marginal.f1 <- aggregate(subset(data=m.set.long.summary, f1=="1"),
normalizedProb ~ categoryID + metaphor + qud + condition, FUN=sum)
head(m.set.long.summary)
m.set.marginal.f1 <- aggregate(data=subset(m.set.long.summary, f1=="1"),
normalizedProb ~ categoryID + metaphor + qud + condition, FUN=sum)
head(m.set.marginal.1)
head(m.set.marginal.f1)
m.set.marginal.f2 <- aggregate(data=subset(m.set.long.summary, f2=="1"),
normalizedProb ~ categoryID + metaphor + qud + condition, FUN=sum)
m.set.marginal.f3 <- aggregate(data=subset(m.set.long.summary, f3=="1"),
normalizedProb ~ categoryID + metaphor + qud + condition, FUN=sum)
m.set.marginal.f1 <- aggregate(data=subset(m.set.long.summary, f1=="1"),
normalizedProb ~ categoryID + metaphor + qud + condition, FUN=sum)
m.set.marginal.f1$featureNum="1"
m.set.marginal.f2 <- aggregate(data=subset(m.set.long.summary, f2=="1"),
normalizedProb ~ categoryID + metaphor + qud + condition, FUN=sum)
m.set.marginal.f2$featureNum="2"
m.set.marginal.f3 <- aggregate(data=subset(m.set.long.summary, f3=="1"),
normalizedProb ~ categoryID + metaphor + qud + condition, FUN=sum)
m.set.marginal.f3$featureNum="3"
m.set.marginal <- rbind(m.set.marginal.f1, m.set.marginal.f2, m.set.marginal.f3)
head(m.set.marginal)
m.set.marginal.condition <- summarySE(m.set.marginal, measurevar="normalizedProb",
groupvars=c("metaphor", "qud"))
ggplot(m.set.marginal.condition, aes(x=qud, y=normalizedProb, fill=featureNum)) +
geom_bar(stat="identity", color="black", position=position_dodge()) +
geom_errorbar(aes(ymin=normalizedProb-se, ymax=normalizedProb+se), position=position_dodge(0.9), width=0.2) +
theme_bw() +
scale_fill_brewer(palette="RdGy") +
facet_grid(.~ metaphor)
m.set.marginal.condition <- summarySE(m.set.marginal, measurevar="normalizedProb",
groupvars=c("metaphor", "qud", "featureNum"))
ggplot(m.set.marginal.condition, aes(x=qud, y=normalizedProb, fill=featureNum)) +
geom_bar(stat="identity", color="black", position=position_dodge()) +
geom_errorbar(aes(ymin=normalizedProb-se, ymax=normalizedProb+se), position=position_dodge(0.9), width=0.2) +
theme_bw() +
scale_fill_brewer(palette="RdGy") +
facet_grid(.~ metaphor)
ggplot(m.set.long.summary.condition, aes(x=qud, y=normalizedProb, fill=featureSetNum)) +
geom_bar(stat="identity", color="black", position=position_dodge()) +
geom_errorbar(aes(ymin=normalizedProb-se, ymax=normalizedProb+se), position=position_dodge(0.9), width=0.2) +
theme_bw() +
scale_fill_brewer(palette="RdGy") +
facet_grid(.~ metaphor)
setwd("~/Documents/Grad_school/Research/Metaphor/metaphors/Data/AlternativesExp/Priors")
fp.set <- read.csv("long-random-100.csv")
fp.set.long <- melt(fp.set, id=c("workerid", "gender", "age", "income", "categoryID", "order", "animal", "featureNum", "alternative"))
fp.set.long$featureSetNum <- unlist(lapply(strsplit(as.character(fp.set.long$variable), "X"), "[", 2))
###################################
# No sigmoid
###################################
# normalize to sum ratings for each person/animal in each trial to 1
# get noramlizing factor by summing ratigs for each subject/category/type
fp.set.normalizing <- aggregate(data=fp.set.long, value ~ workerid + categoryID + animal + featureNum + alternative, FUN=sum)
colnames(fp.set.normalizing)[6] <- "normalizing"
fp.set.long <- join(fp.set.long, fp.set.normalizing, by=c("workerid", "categoryID", "animal", "featureNum", "alternative"))
# filter out rows with 0 as normalizer
fp.set.long <- subset(fp.set.long, normalizing != 0)
fp.set.long$normalizedProb <- fp.set.long$value / fp.set.long$normalizing
################################
# sigmoid transformation
################################
fp.set.long$sigProb <- 1 / (1 + exp(1)^(-4*(fp.set.long$value - 0.5)))
# normalize for sigmoid
fp.set.normalizing.sig <- aggregate(data=fp.set.long, sigProb ~ workerid + categoryID + animal + featureNum + alternative, FUN=sum)
colnames(fp.set.normalizing.sig)[6] <- "normalizing.sig"
fp.set.long <- join(fp.set.long, fp.set.normalizing.sig, by=c("workerid", "categoryID", "animal", "featureNum", "alternative"))
# filter out rows with 0 as normalizer
fp.set.long <- subset(fp.set.long, normalizing != 0)
fp.set.long$normalizedProb.sig <- fp.set.long$sigProb / fp.set.long$normalizing.sig
fp.set.long.summary <- summarySE(data=fp.set.long, measurevar="normalizedProb",
groupvars=c("categoryID", "featureSetNum", "animal", "featureNum", "alternative"))
fp.set.long.sig.summary <- summarySE(data=fp.set.long, measurevar="normalizedProb.sig",
groupvars=c("categoryID", "featureSetNum", "animal", "featureNum", "alternative"))
################
# sanity check
################
fp.set.sanity <- subset(fp.set.long.summary, animal=="owl")
ggplot(fp.set.sanity, aes(x=featureSetNum, y=normalizedProb, fill=featureSetNum)) +
geom_bar(stat="identity", color="black") +
geom_errorbar(aes(ymin=normalizedProb-se, ymax=normalizedProb+se)) +
facet_grid(featureNum ~ alternative)
mapping <- read.csv("../../FeaturePriorExp/featureSetMapping.csv")
mapping$featureSetNum <- factor(mapping$featureSetNum)
fp.set.long.summary <- join(fp.set.long.summary, mapping, by=c("featureSetNum"))
fp.set.marginal.f1 <- aggregate(data=subset(fp.set.long.summary, f1==1),
normalizedProb ~ categoryID + animal + featureNum + alternative,
FUN=sum)
fp.set.marginal.f1$marginal <- "f1"
fp.set.marginal.f2 <- aggregate(data=subset(fp.set.long.summary, f2==1),
normalizedProb ~ categoryID + animal + featureNum + alternative,
FUN=sum)
fp.set.marginal.f2$marginal <- "f2"
fp.set.marginal.f3 <- aggregate(data=subset(fp.set.long.summary, f3==1),
normalizedProb ~ categoryID + animal + featureNum + alternative,
FUN=sum)
fp.set.marginal.f3$marginal <- "f3"
fp.set.marginal <- rbind(fp.set.marginal.f1, fp.set.marginal.f2, fp.set.marginal.f3)
# sanity check
fp.set.marginal.sanity <- subset(fp.set.marginal, animal=="zebra")
ggplot(fp.set.marginal.sanity, aes(x=marginal, y=normalizedProb, fill=marginal)) +
geom_bar(stat="identity", color="black") +
facet_grid(featureNum ~ alternative)
fp.set.long.sig.summary <- join(fp.set.long.sig.summary, mapping, by=c("featureSetNum"))
fp.set.sig.marginal.f1 <- aggregate(data=subset(fp.set.long.sig.summary, f1==1),
normalizedProb.sig ~ categoryID + animal + featureNum + alternative,
FUN=sum)
fp.set.sig.marginal.f1$marginal <- "f1"
fp.set.sig.marginal.f2 <- aggregate(data=subset(fp.set.long.sig.summary, f2==1),
normalizedProb.sig ~ categoryID + animal + featureNum + alternative,
FUN=sum)
fp.set.sig.marginal.f2$marginal <- "f2"
fp.set.sig.marginal.f3 <- aggregate(data=subset(fp.set.long.sig.summary, f3==1),
normalizedProb.sig ~ categoryID + animal + featureNum + alternative,
FUN=sum)
fp.set.sig.marginal.f3$marginal <- "f3"
fp.set.sig.marginal <- rbind(fp.set.sig.marginal.f1, fp.set.sig.marginal.f2, fp.set.sig.marginal.f3)
# sanity check
fp.set.sig.marginal.sanity <- subset(fp.set.sig.marginal, animal=="zebra")
ggplot(fp.set.sig.marginal.sanity, aes(x=marginal, y=normalizedProb.sig, fill=marginal)) +
geom_bar(stat="identity", color="black") +
facet_grid(featureNum ~ alternative)
#write.csv(fp.set.long.summary, "featurePriors-set-transformed.csv", row.names=FALSE)
####################################
# Split half
####################################
prophet <- function(r, n) {
return ((n*r) / (1 + (n-1)*r))
}
fp.cors <- data.frame(cors=NULL, proph=NULL)
for (t in seq(1, 10)) {
ii <- seq_len(nrow(fp.set.long))
ind1 <- sample(ii, nrow(fp.set.long) / 2)
ind2 <- ii[!ii %in% ind1]
p1 <- fp.set.long[ind1, ]
p2 <- fp.set.long[ind2, ]
#p1.summary <- summarySE(fp.set.long, measurevar="normalizedProb", groupvars=c("categoryID", "type", "featureSetNum"))
p1.summary <- summarySE(p1, measurevar="normalizedProb", groupvars=c("categoryID", "animal", "featureNum", "alternative", "featureSetNum"))
p2.summary <- summarySE(p2, measurevar="normalizedProb", groupvars=c("categoryID", "animal", "featureNum", "alternative", "featureSetNum"))
colnames(p1.summary)[7] <- "p1prob"
colnames(p2.summary)[7] <- "p2prob"
fp.splithalf.comp <- join(p1.summary, p2.summary, by=c("categoryID", "animal", "featureSetNum", "alternative", "featureNum"))
fp.splithalf.comp <- fp.splithalf.comp[complete.cases(fp.splithalf.comp),]
this.cor <- with(fp.splithalf.comp, cor(p1prob, p2prob))
fp.cor <- data.frame(cors=this.cor, proph=prophet(this.cor, 2))
fp.cors <- rbind(fp.cor, fp.cors)
}
fp.set.long.summary <- summarySE(data=fp.set.long, measurevar="normalizedProb",
groupvars=c("categoryID", "featureSetNum", "animal", "featureNum", "alternative"))
fp.cors$
mean(fp.cors$proph)
priors.full.wide <- reshape(fp.set.long.summary, v.names="normalizedProb", direction="wide",
timevar="featureSetNum", idvar=c("categoryID", "alternative", "featureNum"), drop=c("N", "sd", "se", "ci",
"f1", "f2", "f3"))
priors.full.wide.noAlt <- subset(priors.full.wide, featureNum=="0")
priors.full.wide.noAlt$target <- ifelse(priors.full.wide.noAlt$alternative=="person", "person", "target")
head(priors.full.wide.noAlt)
write.csv(priors.full.wide.noAlt, "featurePriors-set-wide-noAlt.csv", row.names=FALSE)
